// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.7.0.0
//      SpecFlow Generator Version:3.7.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Features.JsonModel
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.7.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("JsonEquals")]
    public partial class JsonEqualsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "JsonEquals.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/JsonModel", "JsonEquals", "\tValidate the Json Equals operator", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for json element backed value as a string")]
        [NUnit.Framework.TestCaseAttribute("\"Hello\"", "\"Hello\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"Hello\"", "\"Goodbye\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("null", "null", "true", null)]
        [NUnit.Framework.TestCaseAttribute("null", "\"Goodbye\"", "false", null)]
        public virtual void EqualsForJsonElementBackedValueAsAString(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for json element backed value as a string", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 5
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
 testRunner.Given(string.Format("the JsonElement backed JsonString {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 7
 testRunner.When(string.Format("I compare it to the string {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 8
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for dotnet backed value as a string")]
        [NUnit.Framework.TestCaseAttribute("\"Hello\"", "\"Hello\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"Hello\"", "\"Goodbye\"", "false", null)]
        public virtual void EqualsForDotnetBackedValueAsAString(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for dotnet backed value as a string", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 17
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 18
 testRunner.Given(string.Format("the dotnet backed JsonString {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 19
 testRunner.When(string.Format("I compare it to the string {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 20
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for string json element backed value as an IJsonValue")]
        [NUnit.Framework.TestCaseAttribute("\"Hello\"", "\"Hello\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"Hello\"", "\"Goodbye\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"Hello\"", "1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"Hello\"", "1.1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"Hello\"", "[1,2,3]", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"Hello\"", "{ \"first\": \"1\" }", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"Hello\"", "true", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"Hello\"", "false", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"Hello\"", "\"2018-11-13T20:20:39+00:00\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"Hello\"", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"Hello\"", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"Hello\"", "\"hello@endjin.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"Hello\"", "\"www.example.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"Hello\"", "\"http://foo.bar/?baz=qux#quux\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"Hello\"", "\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"Hello\"", "\"{ \\\"first\\\": \\\"1\\\" }\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"Hello\"", "\"192.168.0.1\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"Hello\"", "\"0:0:0:0:0:ffff:c0a8:0001\"", "false", null)]
        public virtual void EqualsForStringJsonElementBackedValueAsAnIJsonValue(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for string json element backed value as an IJsonValue", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 27
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 28
 testRunner.Given(string.Format("the JsonElement backed JsonString {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 29
 testRunner.When(string.Format("I compare the string to the IJsonValue {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 30
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for string dotnet backed value as an IJsonValue")]
        [NUnit.Framework.TestCaseAttribute("\"Hello\"", "\"Hello\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"Hello\"", "\"Goodbye\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"Hello\"", "1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"Hello\"", "1.1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"Hello\"", "[1,2,3]", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"Hello\"", "{ \"first\": \"1\" }", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"Hello\"", "true", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"Hello\"", "false", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"Hello\"", "\"2018-11-13T20:20:39+00:00\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"Hello\"", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"Hello\"", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"Hello\"", "\"hello@endjin.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"Hello\"", "\"www.example.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"Hello\"", "\"http://foo.bar/?baz=qux#quux\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"Hello\"", "\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"Hello\"", "\"{ \\\"first\\\": \\\"1\\\" }\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"Hello\"", "\"192.168.0.1\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"Hello\"", "\"0:0:0:0:0:ffff:c0a8:0001\"", "false", null)]
        public virtual void EqualsForStringDotnetBackedValueAsAnIJsonValue(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for string dotnet backed value as an IJsonValue", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 53
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 54
 testRunner.Given(string.Format("the dotnet backed JsonString {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 55
 testRunner.When(string.Format("I compare the string to the IJsonValue {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 56
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for string json element backed value as an object")]
        [NUnit.Framework.TestCaseAttribute("\"Hello\"", "\"Hello\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"Hello\"", "\"Goodbye\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"Hello\"", "1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"Hello\"", "1.1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"Hello\"", "[1,2,3]", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"Hello\"", "{ \"first\": \"1\" }", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"Hello\"", "true", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"Hello\"", "false", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"Hello\"", "\"2018-11-13T20:20:39+00:00\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"Hello\"", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"Hello\"", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"Hello\"", "\"hello@endjin.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"Hello\"", "\"www.example.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"Hello\"", "\"http://foo.bar/?baz=qux#quux\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"Hello\"", "\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"Hello\"", "\"{ \\\"first\\\": \\\"1\\\" }\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"Hello\"", "\"192.168.0.1\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"Hello\"", "\"0:0:0:0:0:ffff:c0a8:0001\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"Hello\"", "<new object()>", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"Hello\"", "null", "false", null)]
        public virtual void EqualsForStringJsonElementBackedValueAsAnObject(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for string json element backed value as an object", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 79
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 80
 testRunner.Given(string.Format("the JsonElement backed JsonString {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 81
 testRunner.When(string.Format("I compare the string to the object {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 82
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for string dotnet backed value as an object")]
        [NUnit.Framework.TestCaseAttribute("\"Hello\"", "\"Hello\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"Hello\"", "\"Goodbye\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"Hello\"", "1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"Hello\"", "1.1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"Hello\"", "[1,2,3]", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"Hello\"", "{ \"first\": \"1\" }", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"Hello\"", "true", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"Hello\"", "false", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"Hello\"", "\"2018-11-13T20:20:39+00:00\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"Hello\"", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"Hello\"", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"Hello\"", "\"hello@endjin.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"Hello\"", "\"www.example.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"Hello\"", "\"http://foo.bar/?baz=qux#quux\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"Hello\"", "\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"Hello\"", "\"{ \\\"first\\\": \\\"1\\\" }\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"Hello\"", "\"192.168.0.1\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"Hello\"", "\"0:0:0:0:0:ffff:c0a8:0001\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"Hello\"", "<new object()>", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"Hello\"", "null", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"Hello\"", "<null>", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"Hello\"", "<undefined>", "false", null)]
        [NUnit.Framework.TestCaseAttribute("null", "null", "true", null)]
        [NUnit.Framework.TestCaseAttribute("null", "<null>", "true", null)]
        [NUnit.Framework.TestCaseAttribute("null", "<undefined>", "false", null)]
        public virtual void EqualsForStringDotnetBackedValueAsAnObject(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for string dotnet backed value as an object", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 107
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 108
 testRunner.Given(string.Format("the dotnet backed JsonString {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 109
 testRunner.When(string.Format("I compare the string to the object {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 110
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for json element backed value as a boolean")]
        [NUnit.Framework.TestCaseAttribute("true", "true", "true", null)]
        [NUnit.Framework.TestCaseAttribute("false", "false", "true", null)]
        [NUnit.Framework.TestCaseAttribute("true", "false", "false", null)]
        [NUnit.Framework.TestCaseAttribute("false", "true", "false", null)]
        [NUnit.Framework.TestCaseAttribute("true", "null", "false", null)]
        [NUnit.Framework.TestCaseAttribute("null", "true", "false", null)]
        [NUnit.Framework.TestCaseAttribute("null", "null", "true", null)]
        public virtual void EqualsForJsonElementBackedValueAsABoolean(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for json element backed value as a boolean", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 141
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 142
 testRunner.Given(string.Format("the JsonElement backed JsonBoolean {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 143
 testRunner.When(string.Format("I compare it to the boolean {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 144
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for dotnet backed value as a boolean")]
        [NUnit.Framework.TestCaseAttribute("false", "true", "false", null)]
        [NUnit.Framework.TestCaseAttribute("false", "false", "true", null)]
        [NUnit.Framework.TestCaseAttribute("true", "true", "true", null)]
        [NUnit.Framework.TestCaseAttribute("true", "false", "false", null)]
        public virtual void EqualsForDotnetBackedValueAsABoolean(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for dotnet backed value as a boolean", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 156
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 157
 testRunner.Given(string.Format("the dotnet backed JsonBoolean {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 158
 testRunner.When(string.Format("I compare it to the boolean {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 159
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for boolean json element backed value as an IJsonValue")]
        [NUnit.Framework.TestCaseAttribute("false", "\"Hello\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("false", "1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("false", "1.1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("false", "[1,2,3]", "false", null)]
        [NUnit.Framework.TestCaseAttribute("false", "{ \"first\": \"1\" }", "false", null)]
        [NUnit.Framework.TestCaseAttribute("true", "true", "true", null)]
        [NUnit.Framework.TestCaseAttribute("false", "false", "true", null)]
        [NUnit.Framework.TestCaseAttribute("true", "false", "false", null)]
        [NUnit.Framework.TestCaseAttribute("false", "true", "false", null)]
        [NUnit.Framework.TestCaseAttribute("false", "\"2018-11-13T20:20:39+00:00\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("false", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("false", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("false", "\"hello@endjin.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("false", "\"www.example.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("false", "\"http://foo.bar/?baz=qux#quux\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("false", "\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("false", "\"{ \\\"first\\\": \\\"1\\\" }\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("false", "\"192.168.0.1\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("false", "\"0:0:0:0:0:ffff:c0a8:0001\"", "false", null)]
        public virtual void EqualsForBooleanJsonElementBackedValueAsAnIJsonValue(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for boolean json element backed value as an IJsonValue", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 168
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 169
 testRunner.Given(string.Format("the JsonElement backed JsonBoolean {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 170
 testRunner.When(string.Format("I compare the boolean to the IJsonValue {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 171
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for boolean dotnet backed value as an IJsonValue")]
        [NUnit.Framework.TestCaseAttribute("false", "\"Hello\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("false", "1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("false", "1.1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("false", "[1,2,3]", "false", null)]
        [NUnit.Framework.TestCaseAttribute("false", "{ \"first\": \"1\" }", "false", null)]
        [NUnit.Framework.TestCaseAttribute("true", "true", "true", null)]
        [NUnit.Framework.TestCaseAttribute("false", "false", "true", null)]
        [NUnit.Framework.TestCaseAttribute("true", "false", "false", null)]
        [NUnit.Framework.TestCaseAttribute("false", "true", "false", null)]
        [NUnit.Framework.TestCaseAttribute("false", "\"2018-11-13T20:20:39+00:00\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("false", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("false", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("false", "\"hello@endjin.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("false", "\"www.example.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("false", "\"http://foo.bar/?baz=qux#quux\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("false", "\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("false", "\"{ \\\"first\\\": \\\"1\\\" }\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("false", "\"192.168.0.1\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("false", "\"0:0:0:0:0:ffff:c0a8:0001\"", "false", null)]
        public virtual void EqualsForBooleanDotnetBackedValueAsAnIJsonValue(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for boolean dotnet backed value as an IJsonValue", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 195
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 196
 testRunner.Given(string.Format("the dotnet backed JsonBoolean {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 197
 testRunner.When(string.Format("I compare the boolean to the IJsonValue {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 198
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for boolean json element backed value as an object")]
        [NUnit.Framework.TestCaseAttribute("false", "\"Hello\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("false", "1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("false", "1.1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("false", "[1,2,3]", "false", null)]
        [NUnit.Framework.TestCaseAttribute("false", "{ \"first\": \"1\" }", "false", null)]
        [NUnit.Framework.TestCaseAttribute("true", "true", "true", null)]
        [NUnit.Framework.TestCaseAttribute("false", "false", "true", null)]
        [NUnit.Framework.TestCaseAttribute("true", "false", "false", null)]
        [NUnit.Framework.TestCaseAttribute("false", "true", "false", null)]
        [NUnit.Framework.TestCaseAttribute("false", "\"2018-11-13T20:20:39+00:00\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("false", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("false", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("false", "\"hello@endjin.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("false", "\"www.example.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("false", "\"http://foo.bar/?baz=qux#quux\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("false", "\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("false", "\"{ \\\"first\\\": \\\"1\\\" }\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("false", "\"192.168.0.1\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("false", "\"0:0:0:0:0:ffff:c0a8:0001\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("false", "<new object()>", "false", null)]
        [NUnit.Framework.TestCaseAttribute("false", "null", "false", null)]
        public virtual void EqualsForBooleanJsonElementBackedValueAsAnObject(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for boolean json element backed value as an object", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 222
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 223
 testRunner.Given(string.Format("the JsonElement backed JsonBoolean {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 224
 testRunner.When(string.Format("I compare the boolean to the object {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 225
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for boolean dotnet backed value as an object")]
        [NUnit.Framework.TestCaseAttribute("false", "\"Hello\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("false", "1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("false", "1.1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("false", "[1,2,3]", "false", null)]
        [NUnit.Framework.TestCaseAttribute("false", "{ \"first\": \"1\" }", "false", null)]
        [NUnit.Framework.TestCaseAttribute("true", "true", "true", null)]
        [NUnit.Framework.TestCaseAttribute("false", "false", "true", null)]
        [NUnit.Framework.TestCaseAttribute("true", "false", "false", null)]
        [NUnit.Framework.TestCaseAttribute("false", "true", "false", null)]
        [NUnit.Framework.TestCaseAttribute("false", "\"2018-11-13T20:20:39+00:00\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("false", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("false", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("false", "\"hello@endjin.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("false", "\"www.example.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("false", "\"http://foo.bar/?baz=qux#quux\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("false", "\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("false", "\"{ \\\"first\\\": \\\"1\\\" }\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("false", "\"192.168.0.1\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("false", "\"0:0:0:0:0:ffff:c0a8:0001\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("false", "<new object()>", "false", null)]
        [NUnit.Framework.TestCaseAttribute("false", "null", "false", null)]
        [NUnit.Framework.TestCaseAttribute("false", "<null>", "false", null)]
        [NUnit.Framework.TestCaseAttribute("false", "<undefined>", "false", null)]
        [NUnit.Framework.TestCaseAttribute("null", "null", "true", null)]
        [NUnit.Framework.TestCaseAttribute("null", "<null>", "true", null)]
        [NUnit.Framework.TestCaseAttribute("null", "<undefined>", "false", null)]
        public virtual void EqualsForBooleanDotnetBackedValueAsAnObject(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for boolean dotnet backed value as an object", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 251
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 252
 testRunner.Given(string.Format("the dotnet backed JsonBoolean {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 253
 testRunner.When(string.Format("I compare the boolean to the object {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 254
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for json element backed value as an array")]
        [NUnit.Framework.TestCaseAttribute("[1,\"2\",3]", "[1,\"2\",3]", "true", null)]
        [NUnit.Framework.TestCaseAttribute("[1,\"2\",3]", "[3,\"2\",1]", "false", null)]
        [NUnit.Framework.TestCaseAttribute("[1,\"2\",3]", "[1,2,3]", "false", null)]
        [NUnit.Framework.TestCaseAttribute("[]", "[]", "true", null)]
        [NUnit.Framework.TestCaseAttribute("[]", "[3,2,1]", "false", null)]
        [NUnit.Framework.TestCaseAttribute("null", "null", "true", null)]
        [NUnit.Framework.TestCaseAttribute("null", "[1,2,3]", "false", null)]
        public virtual void EqualsForJsonElementBackedValueAsAnArray(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for json element backed value as an array", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 286
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 287
 testRunner.Given(string.Format("the JsonElement backed JsonArray {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 288
 testRunner.When(string.Format("I compare it to the array {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 289
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for dotnet backed value as an array")]
        [NUnit.Framework.TestCaseAttribute("[1,\"2\",3]", "[1,\"2\",3]", "true", null)]
        [NUnit.Framework.TestCaseAttribute("[1,\"2\",3]", "[3,\"2\",1]", "false", null)]
        [NUnit.Framework.TestCaseAttribute("[1,\"2\",3]", "[1,2,3]", "false", null)]
        [NUnit.Framework.TestCaseAttribute("[]", "[]", "true", null)]
        [NUnit.Framework.TestCaseAttribute("[]", "[3,2,1]", "false", null)]
        public virtual void EqualsForDotnetBackedValueAsAnArray(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for dotnet backed value as an array", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 301
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 302
 testRunner.Given(string.Format("the dotnet backed JsonArray {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 303
 testRunner.When(string.Format("I compare it to the array {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 304
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for array json element backed value as an IJsonValue")]
        [NUnit.Framework.TestCaseAttribute("[1,2,3]", "\"Hello\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("[1,2,3]", "1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("[1,2,3]", "1.1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("[1,2,3]", "[1,2,3]", "true", null)]
        [NUnit.Framework.TestCaseAttribute("[1,2,3]", "{ \"first\": \"1\" }", "false", null)]
        [NUnit.Framework.TestCaseAttribute("[1,2,3]", "true", "false", null)]
        [NUnit.Framework.TestCaseAttribute("[1,2,3]", "false", "false", null)]
        [NUnit.Framework.TestCaseAttribute("[1,2,3]", "\"2018-11-13T20:20:39+00:00\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("[1,2,3]", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("[1,2,3]", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("[1,2,3]", "\"hello@endjin.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("[1,2,3]", "\"www.example.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("[1,2,3]", "\"http://foo.bar/?baz=qux#quux\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("[1,2,3]", "\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("[1,2,3]", "\"{ \\\"first\\\": \\\"1\\\" }\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("[1,2,3]", "\"192.168.0.1\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("[1,2,3]", "\"0:0:0:0:0:ffff:c0a8:0001\"", "false", null)]
        public virtual void EqualsForArrayJsonElementBackedValueAsAnIJsonValue(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for array json element backed value as an IJsonValue", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 314
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 315
 testRunner.Given(string.Format("the JsonElement backed JsonArray {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 316
 testRunner.When(string.Format("I compare the array to the IJsonValue {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 317
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for array dotnet backed value as an IJsonValue")]
        [NUnit.Framework.TestCaseAttribute("[1,2,3]", "\"Hello\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("[1,2,3]", "1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("[1,2,3]", "1.1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("[1,2,3]", "[1,2,3]", "true", null)]
        [NUnit.Framework.TestCaseAttribute("[1,2,3]", "{ \"first\": \"1\" }", "false", null)]
        [NUnit.Framework.TestCaseAttribute("[1,2,3]", "true", "false", null)]
        [NUnit.Framework.TestCaseAttribute("[1,2,3]", "false", "false", null)]
        [NUnit.Framework.TestCaseAttribute("[1,2,3]", "\"2018-11-13T20:20:39+00:00\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("[1,2,3]", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("[1,2,3]", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("[1,2,3]", "\"hello@endjin.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("[1,2,3]", "\"www.example.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("[1,2,3]", "\"http://foo.bar/?baz=qux#quux\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("[1,2,3]", "\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("[1,2,3]", "\"{ \\\"first\\\": \\\"1\\\" }\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("[1,2,3]", "\"192.168.0.1\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("[1,2,3]", "\"0:0:0:0:0:ffff:c0a8:0001\"", "false", null)]
        public virtual void EqualsForArrayDotnetBackedValueAsAnIJsonValue(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for array dotnet backed value as an IJsonValue", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 339
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 340
 testRunner.Given(string.Format("the dotnet backed JsonArray {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 341
 testRunner.When(string.Format("I compare the array to the IJsonValue {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 342
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for array json element backed value as an object")]
        [NUnit.Framework.TestCaseAttribute("[1,2,3]", "\"Hello\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("[1,2,3]", "1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("[1,2,3]", "1.1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("[1,2,3]", "[1,2,3]", "true", null)]
        [NUnit.Framework.TestCaseAttribute("[1,2,3]", "{ \"first\": \"1\" }", "false", null)]
        [NUnit.Framework.TestCaseAttribute("[1,2,3]", "true", "false", null)]
        [NUnit.Framework.TestCaseAttribute("[1,2,3]", "false", "false", null)]
        [NUnit.Framework.TestCaseAttribute("[1,2,3]", "\"2018-11-13T20:20:39+00:00\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("[1,2,3]", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("[1,2,3]", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("[1,2,3]", "\"hello@endjin.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("[1,2,3]", "\"www.example.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("[1,2,3]", "\"http://foo.bar/?baz=qux#quux\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("[1,2,3]", "\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("[1,2,3]", "\"{ \\\"first\\\": \\\"1\\\" }\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("[1,2,3]", "\"192.168.0.1\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("[1,2,3]", "\"0:0:0:0:0:ffff:c0a8:0001\"", "false", null)]
        public virtual void EqualsForArrayJsonElementBackedValueAsAnObject(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for array json element backed value as an object", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 364
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 365
 testRunner.Given(string.Format("the JsonElement backed JsonArray {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 366
 testRunner.When(string.Format("I compare the array to the object {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 367
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for array dotnet backed value as an object")]
        [NUnit.Framework.TestCaseAttribute("[1,2,3]", "\"Hello\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("[1,2,3]", "1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("[1,2,3]", "1.1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("[1,2,3]", "[1,2,3]", "true", null)]
        [NUnit.Framework.TestCaseAttribute("[1,2,3]", "{ \"first\": \"1\" }", "false", null)]
        [NUnit.Framework.TestCaseAttribute("[1,2,3]", "true", "false", null)]
        [NUnit.Framework.TestCaseAttribute("[1,2,3]", "false", "false", null)]
        [NUnit.Framework.TestCaseAttribute("[1,2,3]", "\"2018-11-13T20:20:39+00:00\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("[1,2,3]", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("[1,2,3]", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("[1,2,3]", "\"hello@endjin.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("[1,2,3]", "\"www.example.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("[1,2,3]", "\"http://foo.bar/?baz=qux#quux\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("[1,2,3]", "\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("[1,2,3]", "\"{ \\\"first\\\": \\\"1\\\" }\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("[1,2,3]", "\"192.168.0.1\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("[1,2,3]", "\"0:0:0:0:0:ffff:c0a8:0001\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("[1,2,3]", "<new object()>", "false", null)]
        [NUnit.Framework.TestCaseAttribute("[1,2,3]", "null", "false", null)]
        [NUnit.Framework.TestCaseAttribute("[1,2,3]", "<null>", "false", null)]
        [NUnit.Framework.TestCaseAttribute("[1,2,3]", "<undefined>", "false", null)]
        [NUnit.Framework.TestCaseAttribute("null", "null", "true", null)]
        [NUnit.Framework.TestCaseAttribute("null", "<null>", "true", null)]
        [NUnit.Framework.TestCaseAttribute("null", "<undefined>", "false", null)]
        public virtual void EqualsForArrayDotnetBackedValueAsAnObject(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for array dotnet backed value as an object", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 389
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 390
 testRunner.Given(string.Format("the dotnet backed JsonArray {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 391
 testRunner.When(string.Format("I compare the array to the object {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 392
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for json element backed value as a base64content")]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"Goodbye\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("null", "null", "true", null)]
        [NUnit.Framework.TestCaseAttribute("null", "\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "false", null)]
        public virtual void EqualsForJsonElementBackedValueAsABase64Content(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for json element backed value as a base64content", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 422
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 423
 testRunner.Given(string.Format("the JsonElement backed JsonBase64Content {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 424
 testRunner.When(string.Format("I compare it to the base64content {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 425
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for dotnet backed value as a base64content")]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"Goodbye\"", "false", null)]
        public virtual void EqualsForDotnetBackedValueAsABase64Content(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for dotnet backed value as a base64content", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 434
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 435
 testRunner.Given(string.Format("the dotnet backed JsonBase64Content {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 436
 testRunner.When(string.Format("I compare it to the base64content {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 437
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for base64content json element backed value as an IJsonValue")]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"Hello\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"Goodbye\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "1.1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "[1,2,3]", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "{ \"first\": \"1\" }", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "true", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "false", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"2018-11-13T20:20:39+00:00\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"hello@endjin.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"www.example.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"http://foo.bar/?baz=qux#quux\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"{ \\\"first\\\": \\\"1\\\" }\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"192.168.0.1\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"0:0:0:0:0:ffff:c0a8:0001\"", "false", null)]
        public virtual void EqualsForBase64ContentJsonElementBackedValueAsAnIJsonValue(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for base64content json element backed value as an IJsonValue", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 444
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 445
 testRunner.Given(string.Format("the JsonElement backed JsonBase64Content {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 446
 testRunner.When(string.Format("I compare the base64content to the IJsonValue {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 447
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for base64content dotnet backed value as an IJsonValue")]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"Hello\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"Goodbye\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "1.1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "[1,2,3]", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "{ \"first\": \"1\" }", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "true", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "false", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"2018-11-13T20:20:39+00:00\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"hello@endjin.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"www.example.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"http://foo.bar/?baz=qux#quux\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"{ \\\"first\\\": \\\"1\\\" }\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"192.168.0.1\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"0:0:0:0:0:ffff:c0a8:0001\"", "false", null)]
        public virtual void EqualsForBase64ContentDotnetBackedValueAsAnIJsonValue(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for base64content dotnet backed value as an IJsonValue", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 470
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 471
 testRunner.Given(string.Format("the dotnet backed JsonBase64Content {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 472
 testRunner.When(string.Format("I compare the base64content to the IJsonValue {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 473
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for base64content json element backed value as an object")]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"Hello\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"Goodbye\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "1.1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "[1,2,3]", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "{ \"first\": \"1\" }", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "true", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "false", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"2018-11-13T20:20:39+00:00\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"hello@endjin.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"www.example.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"http://foo.bar/?baz=qux#quux\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"{ \\\"first\\\": \\\"1\\\" }\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"192.168.0.1\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"0:0:0:0:0:ffff:c0a8:0001\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "<new object()>", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "null", "false", null)]
        public virtual void EqualsForBase64ContentJsonElementBackedValueAsAnObject(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for base64content json element backed value as an object", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 496
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 497
 testRunner.Given(string.Format("the JsonElement backed JsonBase64Content {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 498
 testRunner.When(string.Format("I compare the base64content to the object {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 499
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for base64content dotnet backed value as an object")]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"Hello\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"Goodbye\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "1.1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "[1,2,3]", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "{ \"first\": \"1\" }", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "true", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "false", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"2018-11-13T20:20:39+00:00\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"hello@endjin.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"www.example.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"http://foo.bar/?baz=qux#quux\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"{ \\\"first\\\": \\\"1\\\" }\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"192.168.0.1\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"0:0:0:0:0:ffff:c0a8:0001\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "<new object()>", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "null", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "<null>", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "<undefined>", "false", null)]
        [NUnit.Framework.TestCaseAttribute("null", "null", "true", null)]
        [NUnit.Framework.TestCaseAttribute("null", "<null>", "true", null)]
        [NUnit.Framework.TestCaseAttribute("null", "<undefined>", "false", null)]
        public virtual void EqualsForBase64ContentDotnetBackedValueAsAnObject(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for base64content dotnet backed value as an object", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 524
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 525
 testRunner.Given(string.Format("the dotnet backed JsonBase64Content {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 526
 testRunner.When(string.Format("I compare the base64content to the object {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 527
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for json element backed value as a base64string")]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"Goodbye\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("null", "null", "true", null)]
        [NUnit.Framework.TestCaseAttribute("null", "\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "false", null)]
        public virtual void EqualsForJsonElementBackedValueAsABase64String(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for json element backed value as a base64string", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 558
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 559
 testRunner.Given(string.Format("the JsonElement backed JsonBase64String {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 560
 testRunner.When(string.Format("I compare it to the base64string {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 561
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for dotnet backed value as a base64string")]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"Goodbye\"", "false", null)]
        public virtual void EqualsForDotnetBackedValueAsABase64String(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for dotnet backed value as a base64string", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 570
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 571
 testRunner.Given(string.Format("the dotnet backed JsonBase64String {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 572
 testRunner.When(string.Format("I compare it to the base64string {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 573
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for base64string json element backed value as an IJsonValue")]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"Hello\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"Goodbye\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "1.1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "[1,2,3]", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "{ \"first\": \"1\" }", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "true", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "false", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"2018-11-13T20:20:39+00:00\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"hello@endjin.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"www.example.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"http://foo.bar/?baz=qux#quux\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"{ \\\"first\\\": \\\"1\\\" }\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"192.168.0.1\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"0:0:0:0:0:ffff:c0a8:0001\"", "false", null)]
        public virtual void EqualsForBase64StringJsonElementBackedValueAsAnIJsonValue(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for base64string json element backed value as an IJsonValue", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 580
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 581
 testRunner.Given(string.Format("the JsonElement backed JsonBase64String {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 582
 testRunner.When(string.Format("I compare the base64string to the IJsonValue {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 583
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for base64string dotnet backed value as an IJsonValue")]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"Hello\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"Goodbye\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "1.1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "[1,2,3]", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "{ \"first\": \"1\" }", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "true", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "false", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"2018-11-13T20:20:39+00:00\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"hello@endjin.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"www.example.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"http://foo.bar/?baz=qux#quux\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"{ \\\"first\\\": \\\"1\\\" }\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"192.168.0.1\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"0:0:0:0:0:ffff:c0a8:0001\"", "false", null)]
        public virtual void EqualsForBase64StringDotnetBackedValueAsAnIJsonValue(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for base64string dotnet backed value as an IJsonValue", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 606
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 607
 testRunner.Given(string.Format("the dotnet backed JsonBase64String {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 608
 testRunner.When(string.Format("I compare the base64string to the IJsonValue {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 609
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for base64string json element backed value as an object")]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"Hello\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"Goodbye\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "1.1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "[1,2,3]", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "{ \"first\": \"1\" }", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "true", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "false", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"2018-11-13T20:20:39+00:00\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"hello@endjin.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"www.example.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"http://foo.bar/?baz=qux#quux\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"{ \\\"first\\\": \\\"1\\\" }\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"192.168.0.1\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"0:0:0:0:0:ffff:c0a8:0001\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "<new object()>", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "null", "false", null)]
        public virtual void EqualsForBase64StringJsonElementBackedValueAsAnObject(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for base64string json element backed value as an object", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 632
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 633
 testRunner.Given(string.Format("the JsonElement backed JsonBase64String {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 634
 testRunner.When(string.Format("I compare the base64string to the object {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 635
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for base64string dotnet backed value as an object")]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"Hello\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"Goodbye\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "1.1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "[1,2,3]", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "{ \"first\": \"1\" }", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "true", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "false", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"2018-11-13T20:20:39+00:00\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"hello@endjin.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"www.example.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"http://foo.bar/?baz=qux#quux\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"{ \\\"first\\\": \\\"1\\\" }\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"192.168.0.1\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "\"0:0:0:0:0:ffff:c0a8:0001\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "<new object()>", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "null", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "<null>", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "<undefined>", "false", null)]
        [NUnit.Framework.TestCaseAttribute("null", "null", "true", null)]
        [NUnit.Framework.TestCaseAttribute("null", "<null>", "true", null)]
        [NUnit.Framework.TestCaseAttribute("null", "<undefined>", "false", null)]
        public virtual void EqualsForBase64StringDotnetBackedValueAsAnObject(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for base64string dotnet backed value as an object", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 660
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 661
 testRunner.Given(string.Format("the dotnet backed JsonBase64String {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 662
 testRunner.When(string.Format("I compare the base64string to the object {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 663
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for json element backed value as a content")]
        [NUnit.Framework.TestCaseAttribute("\"{ \\\"first\\\": \\\"1\\\" }\"", "\"{ \\\"first\\\": \\\"1\\\" }\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"{ \\\"first\\\": \\\"1\\\" }\"", "\"Goodbye\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("null", "null", "true", null)]
        [NUnit.Framework.TestCaseAttribute("null", "\"{ \\\"first\\\": \\\"1\\\" }\"", "false", null)]
        public virtual void EqualsForJsonElementBackedValueAsAContent(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for json element backed value as a content", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 694
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 695
 testRunner.Given(string.Format("the JsonElement backed JsonContent {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 696
 testRunner.When(string.Format("I compare it to the content {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 697
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for dotnet backed value as a content")]
        [NUnit.Framework.TestCaseAttribute("\"{ \\\"first\\\": \\\"1\\\" }\"", "\"{ \\\"first\\\": \\\"1\\\" }\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"{ \\\"first\\\": \\\"1\\\" }\"", "\"Goodbye\"", "false", null)]
        public virtual void EqualsForDotnetBackedValueAsAContent(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for dotnet backed value as a content", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 706
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 707
 testRunner.Given(string.Format("the dotnet backed JsonContent {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 708
 testRunner.When(string.Format("I compare it to the content {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 709
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for content json element backed value as an IJsonValue")]
        [NUnit.Framework.TestCaseAttribute("\"{ \\\"first\\\": \\\"1\\\" }\"", "\"Hello\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"{ \\\"first\\\": \\\"1\\\" }\"", "\"Goodbye\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"{ \\\"first\\\": \\\"1\\\" }\"", "1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"{ \\\"first\\\": \\\"1\\\" }\"", "1.1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"{ \\\"first\\\": \\\"1\\\" }\"", "[1,2,3]", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"{ \\\"first\\\": \\\"1\\\" }\"", "{ \"first\": \"1\" }", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"{ \\\"first\\\": \\\"1\\\" }\"", "true", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"{ \\\"first\\\": \\\"1\\\" }\"", "false", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"{ \\\"first\\\": \\\"1\\\" }\"", "\"2018-11-13T20:20:39+00:00\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"{ \\\"first\\\": \\\"1\\\" }\"", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"{ \\\"first\\\": \\\"1\\\" }\"", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"{ \\\"first\\\": \\\"1\\\" }\"", "\"hello@endjin.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"{ \\\"first\\\": \\\"1\\\" }\"", "\"www.example.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"{ \\\"first\\\": \\\"1\\\" }\"", "\"http://foo.bar/?baz=qux#quux\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"{ \\\"first\\\": \\\"1\\\" }\"", "\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"{ \\\"first\\\": \\\"1\\\" }\"", "\"{ \\\"first\\\": \\\"1\\\" }\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"{ \\\"first\\\": \\\"1\\\" }\"", "\"192.168.0.1\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"{ \\\"first\\\": \\\"1\\\" }\"", "\"0:0:0:0:0:ffff:c0a8:0001\"", "false", null)]
        public virtual void EqualsForContentJsonElementBackedValueAsAnIJsonValue(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for content json element backed value as an IJsonValue", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 716
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 717
 testRunner.Given(string.Format("the JsonElement backed JsonContent {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 718
 testRunner.When(string.Format("I compare the content to the IJsonValue {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 719
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for content dotnet backed value as an IJsonValue")]
        [NUnit.Framework.TestCaseAttribute("\"{ \\\"first\\\": \\\"1\\\" }\"", "\"Hello\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"{ \\\"first\\\": \\\"1\\\" }\"", "\"Goodbye\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"{ \\\"first\\\": \\\"1\\\" }\"", "1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"{ \\\"first\\\": \\\"1\\\" }\"", "1.1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"{ \\\"first\\\": \\\"1\\\" }\"", "[1,2,3]", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"{ \\\"first\\\": \\\"1\\\" }\"", "{ \"first\": \"1\" }", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"{ \\\"first\\\": \\\"1\\\" }\"", "true", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"{ \\\"first\\\": \\\"1\\\" }\"", "false", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"{ \\\"first\\\": \\\"1\\\" }\"", "\"2018-11-13T20:20:39+00:00\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"{ \\\"first\\\": \\\"1\\\" }\"", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"{ \\\"first\\\": \\\"1\\\" }\"", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"{ \\\"first\\\": \\\"1\\\" }\"", "\"hello@endjin.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"{ \\\"first\\\": \\\"1\\\" }\"", "\"www.example.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"{ \\\"first\\\": \\\"1\\\" }\"", "\"http://foo.bar/?baz=qux#quux\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"{ \\\"first\\\": \\\"1\\\" }\"", "\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"{ \\\"first\\\": \\\"1\\\" }\"", "\"{ \\\"first\\\": \\\"1\\\" }\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"{ \\\"first\\\": \\\"1\\\" }\"", "\"192.168.0.1\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"{ \\\"first\\\": \\\"1\\\" }\"", "\"0:0:0:0:0:ffff:c0a8:0001\"", "false", null)]
        public virtual void EqualsForContentDotnetBackedValueAsAnIJsonValue(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for content dotnet backed value as an IJsonValue", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 742
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 743
 testRunner.Given(string.Format("the dotnet backed JsonContent {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 744
 testRunner.When(string.Format("I compare the content to the IJsonValue {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 745
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for content json element backed value as an object")]
        [NUnit.Framework.TestCaseAttribute("\"{ \\\"first\\\": \\\"1\\\" }\"", "\"Hello\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"{ \\\"first\\\": \\\"1\\\" }\"", "\"Goodbye\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"{ \\\"first\\\": \\\"1\\\" }\"", "1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"{ \\\"first\\\": \\\"1\\\" }\"", "1.1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"{ \\\"first\\\": \\\"1\\\" }\"", "[1,2,3]", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"{ \\\"first\\\": \\\"1\\\" }\"", "{ \"first\": \"1\" }", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"{ \\\"first\\\": \\\"1\\\" }\"", "true", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"{ \\\"first\\\": \\\"1\\\" }\"", "false", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"{ \\\"first\\\": \\\"1\\\" }\"", "\"2018-11-13T20:20:39+00:00\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"{ \\\"first\\\": \\\"1\\\" }\"", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"{ \\\"first\\\": \\\"1\\\" }\"", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"{ \\\"first\\\": \\\"1\\\" }\"", "\"hello@endjin.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"{ \\\"first\\\": \\\"1\\\" }\"", "\"www.example.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"{ \\\"first\\\": \\\"1\\\" }\"", "\"http://foo.bar/?baz=qux#quux\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"{ \\\"first\\\": \\\"1\\\" }\"", "\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"{ \\\"first\\\": \\\"1\\\" }\"", "\"{ \\\"first\\\": \\\"1\\\" }\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"{ \\\"first\\\": \\\"1\\\" }\"", "\"192.168.0.1\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"{ \\\"first\\\": \\\"1\\\" }\"", "\"0:0:0:0:0:ffff:c0a8:0001\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"{ \\\"first\\\": \\\"1\\\" }\"", "<new object()>", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"{ \\\"first\\\": \\\"1\\\" }\"", "null", "false", null)]
        public virtual void EqualsForContentJsonElementBackedValueAsAnObject(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for content json element backed value as an object", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 768
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 769
 testRunner.Given(string.Format("the JsonElement backed JsonContent {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 770
 testRunner.When(string.Format("I compare the content to the object {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 771
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for content dotnet backed value as an object")]
        [NUnit.Framework.TestCaseAttribute("\"{ \\\"first\\\": \\\"1\\\" }\"", "\"Hello\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"{ \\\"first\\\": \\\"1\\\" }\"", "\"Goodbye\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"{ \\\"first\\\": \\\"1\\\" }\"", "1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"{ \\\"first\\\": \\\"1\\\" }\"", "1.1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"{ \\\"first\\\": \\\"1\\\" }\"", "[1,2,3]", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"{ \\\"first\\\": \\\"1\\\" }\"", "{ \"first\": \"1\" }", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"{ \\\"first\\\": \\\"1\\\" }\"", "true", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"{ \\\"first\\\": \\\"1\\\" }\"", "false", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"{ \\\"first\\\": \\\"1\\\" }\"", "\"2018-11-13T20:20:39+00:00\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"{ \\\"first\\\": \\\"1\\\" }\"", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"{ \\\"first\\\": \\\"1\\\" }\"", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"{ \\\"first\\\": \\\"1\\\" }\"", "\"hello@endjin.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"{ \\\"first\\\": \\\"1\\\" }\"", "\"www.example.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"{ \\\"first\\\": \\\"1\\\" }\"", "\"http://foo.bar/?baz=qux#quux\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"{ \\\"first\\\": \\\"1\\\" }\"", "\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"{ \\\"first\\\": \\\"1\\\" }\"", "\"{ \\\"first\\\": \\\"1\\\" }\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"{ \\\"first\\\": \\\"1\\\" }\"", "\"192.168.0.1\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"{ \\\"first\\\": \\\"1\\\" }\"", "\"0:0:0:0:0:ffff:c0a8:0001\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"{ \\\"first\\\": \\\"1\\\" }\"", "<new object()>", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"{ \\\"first\\\": \\\"1\\\" }\"", "null", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"{ \\\"first\\\": \\\"1\\\" }\"", "<null>", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"{ \\\"first\\\": \\\"1\\\" }\"", "<undefined>", "false", null)]
        [NUnit.Framework.TestCaseAttribute("null", "null", "true", null)]
        [NUnit.Framework.TestCaseAttribute("null", "<null>", "true", null)]
        [NUnit.Framework.TestCaseAttribute("null", "<undefined>", "false", null)]
        public virtual void EqualsForContentDotnetBackedValueAsAnObject(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for content dotnet backed value as an object", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 796
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 797
 testRunner.Given(string.Format("the dotnet backed JsonContent {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 798
 testRunner.When(string.Format("I compare the content to the object {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 799
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for json element backed value as a date")]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13\"", "\"2018-11-13\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"Garbage\"", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13\"", "\"Goodbye\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("null", "null", "true", null)]
        [NUnit.Framework.TestCaseAttribute("null", "\"2018-11-13\"", "false", null)]
        public virtual void EqualsForJsonElementBackedValueAsADate(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for json element backed value as a date", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 830
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 831
 testRunner.Given(string.Format("the JsonElement backed JsonDate {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 832
 testRunner.When(string.Format("I compare it to the date {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 833
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for dotnet backed value as a date")]
        [NUnit.Framework.TestCaseAttribute("\"Garbage\"", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13\"", "\"2018-11-13\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13\"", "\"Goodbye\"", "false", null)]
        public virtual void EqualsForDotnetBackedValueAsADate(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for dotnet backed value as a date", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 843
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 844
 testRunner.Given(string.Format("the dotnet backed JsonDate {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 845
 testRunner.When(string.Format("I compare it to the date {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 846
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for date json element backed value as an IJsonValue")]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13\"", "\"Hello\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13\"", "\"Goodbye\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13\"", "1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13\"", "1.1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13\"", "[1,2,3]", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13\"", "{ \"first\": \"1\" }", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13\"", "true", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13\"", "false", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13\"", "\"2018-11-13T20:20:39+00:00\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13\"", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13\"", "\"2018-11-13\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"Garbage\"", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13\"", "\"hello@endjin.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13\"", "\"www.example.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13\"", "\"http://foo.bar/?baz=qux#quux\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13\"", "\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13\"", "\"{ \\\"first\\\": \\\"1\\\" }\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13\"", "\"192.168.0.1\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13\"", "\"0:0:0:0:0:ffff:c0a8:0001\"", "false", null)]
        public virtual void EqualsForDateJsonElementBackedValueAsAnIJsonValue(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for date json element backed value as an IJsonValue", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 854
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 855
 testRunner.Given(string.Format("the JsonElement backed JsonDate {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 856
 testRunner.When(string.Format("I compare the date to the IJsonValue {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 857
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for date dotnet backed value as an IJsonValue")]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13\"", "\"Hello\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13\"", "\"Goodbye\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13\"", "1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13\"", "1.1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13\"", "[1,2,3]", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13\"", "{ \"first\": \"1\" }", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13\"", "true", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13\"", "false", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13\"", "\"2018-11-13T20:20:39+00:00\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13\"", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13\"", "\"2018-11-13\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"Garbage\"", "\"2018-11-13T20:20:39+00:00\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13\"", "\"hello@endjin.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13\"", "\"www.example.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13\"", "\"http://foo.bar/?baz=qux#quux\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13\"", "\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13\"", "\"{ \\\"first\\\": \\\"1\\\" }\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13\"", "\"192.168.0.1\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13\"", "\"0:0:0:0:0:ffff:c0a8:0001\"", "false", null)]
        public virtual void EqualsForDateDotnetBackedValueAsAnIJsonValue(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for date dotnet backed value as an IJsonValue", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 881
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 882
 testRunner.Given(string.Format("the dotnet backed JsonDate {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 883
 testRunner.When(string.Format("I compare the date to the IJsonValue {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 884
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for date json element backed value as an object")]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13\"", "\"Hello\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13\"", "\"Goodbye\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13\"", "1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13\"", "1.1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13\"", "[1,2,3]", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13\"", "{ \"first\": \"1\" }", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13\"", "true", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13\"", "false", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13\"", "\"2018-11-13T20:20:39+00:00\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13\"", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13\"", "\"2018-11-13\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13\"", "\"hello@endjin.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13\"", "\"www.example.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13\"", "\"http://foo.bar/?baz=qux#quux\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13\"", "\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13\"", "\"{ \\\"first\\\": \\\"1\\\" }\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13\"", "\"192.168.0.1\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13\"", "\"0:0:0:0:0:ffff:c0a8:0001\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13\"", "<new object()>", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13\"", "null", "false", null)]
        public virtual void EqualsForDateJsonElementBackedValueAsAnObject(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for date json element backed value as an object", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 908
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 909
 testRunner.Given(string.Format("the JsonElement backed JsonDate {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 910
 testRunner.When(string.Format("I compare the date to the object {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 911
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for date dotnet backed value as an object")]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13\"", "\"Hello\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13\"", "\"Goodbye\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13\"", "1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13\"", "1.1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13\"", "[1,2,3]", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13\"", "{ \"first\": \"1\" }", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13\"", "true", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13\"", "false", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13\"", "\"2018-11-13T20:20:39+00:00\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13\"", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13\"", "\"2018-11-13\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13\"", "\"hello@endjin.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13\"", "\"www.example.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13\"", "\"http://foo.bar/?baz=qux#quux\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13\"", "\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13\"", "\"{ \\\"first\\\": \\\"1\\\" }\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13\"", "\"192.168.0.1\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13\"", "\"0:0:0:0:0:ffff:c0a8:0001\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13\"", "<new object()>", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13\"", "null", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13\"", "<null>", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13\"", "<undefined>", "false", null)]
        [NUnit.Framework.TestCaseAttribute("null", "null", "true", null)]
        [NUnit.Framework.TestCaseAttribute("null", "<null>", "true", null)]
        [NUnit.Framework.TestCaseAttribute("null", "<undefined>", "false", null)]
        public virtual void EqualsForDateDotnetBackedValueAsAnObject(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for date dotnet backed value as an object", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 936
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 937
 testRunner.Given(string.Format("the dotnet backed JsonDate {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 938
 testRunner.When(string.Format("I compare the date to the object {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 939
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for json element backed value as a dateTime")]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13T20:20:39+00:00\"", "\"2018-11-13T20:20:39+00:00\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"Garbage\"", "\"2018-11-13T20:20:39+00:00\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13T20:20:39+00:00\"", "\"Goodbye\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("null", "null", "true", null)]
        [NUnit.Framework.TestCaseAttribute("null", "\"2018-11-13T20:20:39+00:00\"", "false", null)]
        public virtual void EqualsForJsonElementBackedValueAsADateTime(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for json element backed value as a dateTime", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 970
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 971
 testRunner.Given(string.Format("the JsonElement backed JsonDateTime {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 972
 testRunner.When(string.Format("I compare it to the dateTime {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 973
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for dotnet backed value as a dateTime")]
        [NUnit.Framework.TestCaseAttribute("\"Garbage\"", "\"2018-11-13T20:20:39+00:00\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13T20:20:39+00:00\"", "\"2018-11-13T20:20:39+00:00\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13T20:20:39+00:00\"", "\"Goodbye\"", "false", null)]
        public virtual void EqualsForDotnetBackedValueAsADateTime(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for dotnet backed value as a dateTime", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 983
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 984
 testRunner.Given(string.Format("the dotnet backed JsonDateTime {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 985
 testRunner.When(string.Format("I compare it to the dateTime {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 986
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for dateTime json element backed value as an IJsonValue")]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13T20:20:39+00:00\"", "\"Hello\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13T20:20:39+00:00\"", "\"Goodbye\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13T20:20:39+00:00\"", "1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13T20:20:39+00:00\"", "1.1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13T20:20:39+00:00\"", "[1,2,3]", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13T20:20:39+00:00\"", "{ \"first\": \"1\" }", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13T20:20:39+00:00\"", "true", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13T20:20:39+00:00\"", "false", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13T20:20:39+00:00\"", "\"2018-11-13T20:20:39+00:00\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13T20:20:39+00:00\"", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13T20:20:39+00:00\"", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"Garbage\"", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13T20:20:39+00:00\"", "\"hello@endjin.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13T20:20:39+00:00\"", "\"www.example.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13T20:20:39+00:00\"", "\"http://foo.bar/?baz=qux#quux\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13T20:20:39+00:00\"", "\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13T20:20:39+00:00\"", "\"{ \\\"first\\\": \\\"1\\\" }\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13T20:20:39+00:00\"", "\"192.168.0.1\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13T20:20:39+00:00\"", "\"0:0:0:0:0:ffff:c0a8:0001\"", "false", null)]
        public virtual void EqualsForDateTimeJsonElementBackedValueAsAnIJsonValue(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for dateTime json element backed value as an IJsonValue", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 994
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 995
 testRunner.Given(string.Format("the JsonElement backed JsonDateTime {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 996
 testRunner.When(string.Format("I compare the dateTime to the IJsonValue {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 997
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for dateTime dotnet backed value as an IJsonValue")]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13T20:20:39+00:00\"", "\"Hello\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13T20:20:39+00:00\"", "\"Goodbye\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13T20:20:39+00:00\"", "1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13T20:20:39+00:00\"", "1.1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13T20:20:39+00:00\"", "[1,2,3]", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13T20:20:39+00:00\"", "{ \"first\": \"1\" }", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13T20:20:39+00:00\"", "true", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13T20:20:39+00:00\"", "false", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13T20:20:39+00:00\"", "\"2018-11-13T20:20:39+00:00\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13T20:20:39+00:00\"", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13T20:20:39+00:00\"", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"Garbage\"", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13T20:20:39+00:00\"", "\"hello@endjin.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13T20:20:39+00:00\"", "\"www.example.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13T20:20:39+00:00\"", "\"http://foo.bar/?baz=qux#quux\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13T20:20:39+00:00\"", "\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13T20:20:39+00:00\"", "\"{ \\\"first\\\": \\\"1\\\" }\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13T20:20:39+00:00\"", "\"192.168.0.1\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13T20:20:39+00:00\"", "\"0:0:0:0:0:ffff:c0a8:0001\"", "false", null)]
        public virtual void EqualsForDateTimeDotnetBackedValueAsAnIJsonValue(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for dateTime dotnet backed value as an IJsonValue", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1021
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1022
 testRunner.Given(string.Format("the dotnet backed JsonDateTime {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1023
 testRunner.When(string.Format("I compare the dateTime to the IJsonValue {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1024
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for dateTime json element backed value as an object")]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13T20:20:39+00:00\"", "\"Hello\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13T20:20:39+00:00\"", "\"Goodbye\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13T20:20:39+00:00\"", "1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13T20:20:39+00:00\"", "1.1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13T20:20:39+00:00\"", "[1,2,3]", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13T20:20:39+00:00\"", "{ \"first\": \"1\" }", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13T20:20:39+00:00\"", "true", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13T20:20:39+00:00\"", "false", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13T20:20:39+00:00\"", "\"2018-11-13T20:20:39+00:00\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13T20:20:39+00:00\"", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13T20:20:39+00:00\"", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13T20:20:39+00:00\"", "\"hello@endjin.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13T20:20:39+00:00\"", "\"www.example.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13T20:20:39+00:00\"", "\"http://foo.bar/?baz=qux#quux\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13T20:20:39+00:00\"", "\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13T20:20:39+00:00\"", "\"{ \\\"first\\\": \\\"1\\\" }\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13T20:20:39+00:00\"", "\"192.168.0.1\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13T20:20:39+00:00\"", "\"0:0:0:0:0:ffff:c0a8:0001\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13T20:20:39+00:00\"", "<new object()>", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13T20:20:39+00:00\"", "null", "false", null)]
        public virtual void EqualsForDateTimeJsonElementBackedValueAsAnObject(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for dateTime json element backed value as an object", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1048
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1049
 testRunner.Given(string.Format("the JsonElement backed JsonDateTime {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1050
 testRunner.When(string.Format("I compare the dateTime to the object {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1051
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for dateTime dotnet backed value as an object")]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13T20:20:39+00:00\"", "\"Hello\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13T20:20:39+00:00\"", "\"Goodbye\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13T20:20:39+00:00\"", "1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13T20:20:39+00:00\"", "1.1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13T20:20:39+00:00\"", "[1,2,3]", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13T20:20:39+00:00\"", "{ \"first\": \"1\" }", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13T20:20:39+00:00\"", "true", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13T20:20:39+00:00\"", "false", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13T20:20:39+00:00\"", "\"2018-11-13T20:20:39+00:00\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13T20:20:39+00:00\"", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13T20:20:39+00:00\"", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13T20:20:39+00:00\"", "\"hello@endjin.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13T20:20:39+00:00\"", "\"www.example.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13T20:20:39+00:00\"", "\"http://foo.bar/?baz=qux#quux\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13T20:20:39+00:00\"", "\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13T20:20:39+00:00\"", "\"{ \\\"first\\\": \\\"1\\\" }\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13T20:20:39+00:00\"", "\"192.168.0.1\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13T20:20:39+00:00\"", "\"0:0:0:0:0:ffff:c0a8:0001\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13T20:20:39+00:00\"", "<new object()>", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13T20:20:39+00:00\"", "null", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13T20:20:39+00:00\"", "<null>", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"2018-11-13T20:20:39+00:00\"", "<undefined>", "false", null)]
        [NUnit.Framework.TestCaseAttribute("null", "null", "true", null)]
        [NUnit.Framework.TestCaseAttribute("null", "<null>", "true", null)]
        [NUnit.Framework.TestCaseAttribute("null", "<undefined>", "false", null)]
        public virtual void EqualsForDateTimeDotnetBackedValueAsAnObject(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for dateTime dotnet backed value as an object", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1076
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1077
 testRunner.Given(string.Format("the dotnet backed JsonDateTime {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1078
 testRunner.When(string.Format("I compare the dateTime to the object {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1079
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for json element backed value as a duration")]
        [NUnit.Framework.TestCaseAttribute("\"P3Y6M4DT12H30M5S\"", "\"P3Y6M4DT12H30M5S\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"Garbage\"", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"P3Y6M4DT12H30M5S\"", "\"Goodbye\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("null", "null", "true", null)]
        [NUnit.Framework.TestCaseAttribute("null", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        public virtual void EqualsForJsonElementBackedValueAsADuration(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for json element backed value as a duration", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1110
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1111
 testRunner.Given(string.Format("the JsonElement backed JsonDuration {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1112
 testRunner.When(string.Format("I compare it to the duration {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1113
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for dotnet backed value as a duration")]
        [NUnit.Framework.TestCaseAttribute("\"Garbage\"", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"P3Y6M4DT12H30M5S\"", "\"P3Y6M4DT12H30M5S\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"P3Y6M4DT12H30M5S\"", "\"Goodbye\"", "false", null)]
        public virtual void EqualsForDotnetBackedValueAsADuration(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for dotnet backed value as a duration", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1123
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1124
 testRunner.Given(string.Format("the dotnet backed JsonDuration {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1125
 testRunner.When(string.Format("I compare it to the duration {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1126
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for duration json element backed value as an IJsonValue")]
        [NUnit.Framework.TestCaseAttribute("\"P3Y6M4DT12H30M5S\"", "\"Hello\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"P3Y6M4DT12H30M5S\"", "\"Goodbye\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"P3Y6M4DT12H30M5S\"", "1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"P3Y6M4DT12H30M5S\"", "1.1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"P3Y6M4DT12H30M5S\"", "[1,2,3]", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"P3Y6M4DT12H30M5S\"", "{ \"first\": \"1\" }", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"P3Y6M4DT12H30M5S\"", "true", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"P3Y6M4DT12H30M5S\"", "false", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"P3Y6M4DT12H30M5S\"", "\"2018-11-13T20:20:39+00:00\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"P3Y6M4DT12H30M5S\"", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"P3Y6M4DT12H30M5S\"", "\"P3Y6M4DT12H30M5S\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"Garbage\"", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"P3Y6M4DT12H30M5S\"", "\"hello@endjin.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"P3Y6M4DT12H30M5S\"", "\"www.example.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"P3Y6M4DT12H30M5S\"", "\"http://foo.bar/?baz=qux#quux\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"P3Y6M4DT12H30M5S\"", "\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"P3Y6M4DT12H30M5S\"", "\"{ \\\"first\\\": \\\"1\\\" }\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"P3Y6M4DT12H30M5S\"", "\"192.168.0.1\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"P3Y6M4DT12H30M5S\"", "\"0:0:0:0:0:ffff:c0a8:0001\"", "false", null)]
        public virtual void EqualsForDurationJsonElementBackedValueAsAnIJsonValue(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for duration json element backed value as an IJsonValue", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1134
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1135
 testRunner.Given(string.Format("the JsonElement backed JsonDuration {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1136
 testRunner.When(string.Format("I compare the duration to the IJsonValue {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1137
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for duration dotnet backed value as an IJsonValue")]
        [NUnit.Framework.TestCaseAttribute("\"P3Y6M4DT12H30M5S\"", "\"Hello\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"P3Y6M4DT12H30M5S\"", "\"Goodbye\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"P3Y6M4DT12H30M5S\"", "1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"P3Y6M4DT12H30M5S\"", "1.1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"P3Y6M4DT12H30M5S\"", "[1,2,3]", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"P3Y6M4DT12H30M5S\"", "{ \"first\": \"1\" }", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"P3Y6M4DT12H30M5S\"", "true", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"P3Y6M4DT12H30M5S\"", "false", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"P3Y6M4DT12H30M5S\"", "\"2018-11-13T20:20:39+00:00\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"P3Y6M4DT12H30M5S\"", "\"P3Y6M4DT12H30M5S\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"P3Y6M4DT12H30M5S\"", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"Garbage\"", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"P3Y6M4DT12H30M5S\"", "\"hello@endjin.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"P3Y6M4DT12H30M5S\"", "\"www.example.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"P3Y6M4DT12H30M5S\"", "\"http://foo.bar/?baz=qux#quux\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"P3Y6M4DT12H30M5S\"", "\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"P3Y6M4DT12H30M5S\"", "\"{ \\\"first\\\": \\\"1\\\" }\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"P3Y6M4DT12H30M5S\"", "\"192.168.0.1\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"P3Y6M4DT12H30M5S\"", "\"0:0:0:0:0:ffff:c0a8:0001\"", "false", null)]
        public virtual void EqualsForDurationDotnetBackedValueAsAnIJsonValue(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for duration dotnet backed value as an IJsonValue", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1161
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1162
 testRunner.Given(string.Format("the dotnet backed JsonDuration {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1163
 testRunner.When(string.Format("I compare the duration to the IJsonValue {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1164
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for duration json element backed value as an object")]
        [NUnit.Framework.TestCaseAttribute("\"P3Y6M4DT12H30M5S\"", "\"Hello\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"P3Y6M4DT12H30M5S\"", "\"Goodbye\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"P3Y6M4DT12H30M5S\"", "1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"P3Y6M4DT12H30M5S\"", "1.1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"P3Y6M4DT12H30M5S\"", "[1,2,3]", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"P3Y6M4DT12H30M5S\"", "{ \"first\": \"1\" }", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"P3Y6M4DT12H30M5S\"", "true", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"P3Y6M4DT12H30M5S\"", "false", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"P3Y6M4DT12H30M5S\"", "\"2018-11-13T20:20:39+00:00\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"P3Y6M4DT12H30M5S\"", "\"P3Y6M4DT12H30M5S\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"P3Y6M4DT12H30M5S\"", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"P3Y6M4DT12H30M5S\"", "\"hello@endjin.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"P3Y6M4DT12H30M5S\"", "\"www.example.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"P3Y6M4DT12H30M5S\"", "\"http://foo.bar/?baz=qux#quux\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"P3Y6M4DT12H30M5S\"", "\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"P3Y6M4DT12H30M5S\"", "\"{ \\\"first\\\": \\\"1\\\" }\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"P3Y6M4DT12H30M5S\"", "\"192.168.0.1\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"P3Y6M4DT12H30M5S\"", "\"0:0:0:0:0:ffff:c0a8:0001\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"P3Y6M4DT12H30M5S\"", "<new object()>", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"P3Y6M4DT12H30M5S\"", "null", "false", null)]
        public virtual void EqualsForDurationJsonElementBackedValueAsAnObject(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for duration json element backed value as an object", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1188
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1189
 testRunner.Given(string.Format("the JsonElement backed JsonDuration {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1190
 testRunner.When(string.Format("I compare the duration to the object {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1191
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for duration dotnet backed value as an object")]
        [NUnit.Framework.TestCaseAttribute("\"P3Y6M4DT12H30M5S\"", "\"Hello\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"P3Y6M4DT12H30M5S\"", "\"Goodbye\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"P3Y6M4DT12H30M5S\"", "1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"P3Y6M4DT12H30M5S\"", "1.1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"P3Y6M4DT12H30M5S\"", "[1,2,3]", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"P3Y6M4DT12H30M5S\"", "{ \"first\": \"1\" }", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"P3Y6M4DT12H30M5S\"", "true", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"P3Y6M4DT12H30M5S\"", "false", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"P3Y6M4DT12H30M5S\"", "\"2018-11-13T20:20:39+00:00\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"P3Y6M4DT12H30M5S\"", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"P3Y6M4DT12H30M5S\"", "\"P3Y6M4DT12H30M5S\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"P3Y6M4DT12H30M5S\"", "\"hello@endjin.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"P3Y6M4DT12H30M5S\"", "\"www.example.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"P3Y6M4DT12H30M5S\"", "\"http://foo.bar/?baz=qux#quux\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"P3Y6M4DT12H30M5S\"", "\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"P3Y6M4DT12H30M5S\"", "\"{ \\\"first\\\": \\\"1\\\" }\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"P3Y6M4DT12H30M5S\"", "\"192.168.0.1\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"P3Y6M4DT12H30M5S\"", "\"0:0:0:0:0:ffff:c0a8:0001\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"P3Y6M4DT12H30M5S\"", "<new object()>", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"P3Y6M4DT12H30M5S\"", "null", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"P3Y6M4DT12H30M5S\"", "<null>", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"P3Y6M4DT12H30M5S\"", "<undefined>", "false", null)]
        [NUnit.Framework.TestCaseAttribute("null", "null", "true", null)]
        [NUnit.Framework.TestCaseAttribute("null", "<null>", "true", null)]
        [NUnit.Framework.TestCaseAttribute("null", "<undefined>", "false", null)]
        public virtual void EqualsForDurationDotnetBackedValueAsAnObject(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for duration dotnet backed value as an object", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1216
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1217
 testRunner.Given(string.Format("the dotnet backed JsonDuration {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1218
 testRunner.When(string.Format("I compare the duration to the object {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1219
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for json element backed value as a email")]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"hello@endjin.com\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"Garbage\"", "\"hello@endjin.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"Goodbye\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("null", "null", "true", null)]
        [NUnit.Framework.TestCaseAttribute("null", "\"hello@endjin.com\"", "false", null)]
        public virtual void EqualsForJsonElementBackedValueAsAEmail(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for json element backed value as a email", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1250
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1251
 testRunner.Given(string.Format("the JsonElement backed JsonEmail {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1252
 testRunner.When(string.Format("I compare it to the email {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1253
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for dotnet backed value as a email")]
        [NUnit.Framework.TestCaseAttribute("\"Garbage\"", "\"hello@endjin.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"hello@endjin.com\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"Goodbye\"", "false", null)]
        public virtual void EqualsForDotnetBackedValueAsAEmail(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for dotnet backed value as a email", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1263
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1264
 testRunner.Given(string.Format("the dotnet backed JsonEmail {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1265
 testRunner.When(string.Format("I compare it to the email {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1266
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for email json element backed value as an IJsonValue")]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"Hello\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"Goodbye\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "1.1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "[1,2,3]", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "{ \"first\": \"1\" }", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "true", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "false", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"2018-11-13T20:20:39+00:00\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"Garbage\"", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"hello@endjin.com\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"www.example.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"http://foo.bar/?baz=qux#quux\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"{ \\\"first\\\": \\\"1\\\" }\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"192.168.0.1\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"0:0:0:0:0:ffff:c0a8:0001\"", "false", null)]
        public virtual void EqualsForEmailJsonElementBackedValueAsAnIJsonValue(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for email json element backed value as an IJsonValue", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1274
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1275
 testRunner.Given(string.Format("the JsonElement backed JsonEmail {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1276
 testRunner.When(string.Format("I compare the email to the IJsonValue {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1277
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for email dotnet backed value as an IJsonValue")]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"Hello\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"Goodbye\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "1.1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "[1,2,3]", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "{ \"first\": \"1\" }", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "true", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "false", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"2018-11-13T20:20:39+00:00\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"www.example.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"http://foo.bar/?baz=qux#quux\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"Garbage\"", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"hello@endjin.com\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"{ \\\"first\\\": \\\"1\\\" }\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"192.168.0.1\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"0:0:0:0:0:ffff:c0a8:0001\"", "false", null)]
        public virtual void EqualsForEmailDotnetBackedValueAsAnIJsonValue(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for email dotnet backed value as an IJsonValue", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1301
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1302
 testRunner.Given(string.Format("the dotnet backed JsonEmail {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1303
 testRunner.When(string.Format("I compare the email to the IJsonValue {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1304
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for email json element backed value as an object")]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"Hello\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"Goodbye\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "1.1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "[1,2,3]", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "{ \"first\": \"1\" }", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "true", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "false", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"2018-11-13T20:20:39+00:00\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"hello@endjin.com\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"www.example.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"http://foo.bar/?baz=qux#quux\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"{ \\\"first\\\": \\\"1\\\" }\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"192.168.0.1\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"0:0:0:0:0:ffff:c0a8:0001\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "<new object()>", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "null", "false", null)]
        public virtual void EqualsForEmailJsonElementBackedValueAsAnObject(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for email json element backed value as an object", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1328
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1329
 testRunner.Given(string.Format("the JsonElement backed JsonEmail {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1330
 testRunner.When(string.Format("I compare the email to the object {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1331
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for email dotnet backed value as an object")]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"Hello\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"Goodbye\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "1.1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "[1,2,3]", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "{ \"first\": \"1\" }", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "true", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "false", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"2018-11-13T20:20:39+00:00\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"hello@endjin.com\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"www.example.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"http://foo.bar/?baz=qux#quux\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"{ \\\"first\\\": \\\"1\\\" }\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"192.168.0.1\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"0:0:0:0:0:ffff:c0a8:0001\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "<new object()>", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "null", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "<null>", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "<undefined>", "false", null)]
        [NUnit.Framework.TestCaseAttribute("null", "null", "true", null)]
        [NUnit.Framework.TestCaseAttribute("null", "<null>", "true", null)]
        [NUnit.Framework.TestCaseAttribute("null", "<undefined>", "false", null)]
        public virtual void EqualsForEmailDotnetBackedValueAsAnObject(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for email dotnet backed value as an object", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1356
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1357
 testRunner.Given(string.Format("the dotnet backed JsonEmail {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1358
 testRunner.When(string.Format("I compare the email to the object {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1359
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for json element backed value as a idnEmail")]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"hello@endjin.com\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"Garbage\"", "\"hello@endjin.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"Goodbye\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("null", "null", "true", null)]
        [NUnit.Framework.TestCaseAttribute("null", "\"hello@endjin.com\"", "false", null)]
        public virtual void EqualsForJsonElementBackedValueAsAIdnEmail(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for json element backed value as a idnEmail", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1390
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1391
 testRunner.Given(string.Format("the JsonElement backed JsonIdnEmail {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1392
 testRunner.When(string.Format("I compare it to the idnEmail {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1393
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for dotnet backed value as a idnEmail")]
        [NUnit.Framework.TestCaseAttribute("\"Garbage\"", "\"hello@endjin.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"hello@endjin.com\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"Goodbye\"", "false", null)]
        public virtual void EqualsForDotnetBackedValueAsAIdnEmail(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for dotnet backed value as a idnEmail", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1403
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1404
 testRunner.Given(string.Format("the dotnet backed JsonIdnEmail {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1405
 testRunner.When(string.Format("I compare it to the idnEmail {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1406
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for idnEmail json element backed value as an IJsonValue")]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"Hello\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"Goodbye\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "1.1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "[1,2,3]", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "{ \"first\": \"1\" }", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "true", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "false", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"2018-11-13T20:20:39+00:00\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"Garbage\"", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"hello@endjin.com\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"www.example.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"http://foo.bar/?baz=qux#quux\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"{ \\\"first\\\": \\\"1\\\" }\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"192.168.0.1\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"0:0:0:0:0:ffff:c0a8:0001\"", "false", null)]
        public virtual void EqualsForIdnEmailJsonElementBackedValueAsAnIJsonValue(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for idnEmail json element backed value as an IJsonValue", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1414
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1415
 testRunner.Given(string.Format("the JsonElement backed JsonIdnEmail {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1416
 testRunner.When(string.Format("I compare the idnEmail to the IJsonValue {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1417
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for idnEmail dotnet backed value as an IJsonValue")]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"Hello\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"Goodbye\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "1.1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "[1,2,3]", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "{ \"first\": \"1\" }", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "true", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "false", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"2018-11-13T20:20:39+00:00\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"Garbage\"", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"hello@endjin.com\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"http://foo.bar/?baz=qux#quux\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"www.example.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"{ \\\"first\\\": \\\"1\\\" }\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"0:0:0:0:0:ffff:c0a8:0001\"", "false", null)]
        public virtual void EqualsForIdnEmailDotnetBackedValueAsAnIJsonValue(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for idnEmail dotnet backed value as an IJsonValue", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1441
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1442
 testRunner.Given(string.Format("the dotnet backed JsonIdnEmail {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1443
 testRunner.When(string.Format("I compare the idnEmail to the IJsonValue {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1444
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for idnEmail json element backed value as an object")]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"Hello\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"Goodbye\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "1.1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "[1,2,3]", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "{ \"first\": \"1\" }", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "true", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "false", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"2018-11-13T20:20:39+00:00\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"hello@endjin.com\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"www.example.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"http://foo.bar/?baz=qux#quux\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"{ \\\"first\\\": \\\"1\\\" }\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"192.168.0.1\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"0:0:0:0:0:ffff:c0a8:0001\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "<new object()>", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "null", "false", null)]
        public virtual void EqualsForIdnEmailJsonElementBackedValueAsAnObject(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for idnEmail json element backed value as an object", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1467
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1468
 testRunner.Given(string.Format("the JsonElement backed JsonIdnEmail {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1469
 testRunner.When(string.Format("I compare the idnEmail to the object {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1470
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for idnEmail dotnet backed value as an object")]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"Hello\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"Goodbye\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "1.1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "[1,2,3]", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "{ \"first\": \"1\" }", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "true", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "false", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"2018-11-13T20:20:39+00:00\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"hello@endjin.com\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"www.example.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"http://foo.bar/?baz=qux#quux\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"{ \\\"first\\\": \\\"1\\\" }\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"192.168.0.1\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "\"0:0:0:0:0:ffff:c0a8:0001\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "<new object()>", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "null", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "<null>", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"hello@endjin.com\"", "<undefined>", "false", null)]
        [NUnit.Framework.TestCaseAttribute("null", "null", "true", null)]
        [NUnit.Framework.TestCaseAttribute("null", "<null>", "true", null)]
        [NUnit.Framework.TestCaseAttribute("null", "<undefined>", "false", null)]
        public virtual void EqualsForIdnEmailDotnetBackedValueAsAnObject(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for idnEmail dotnet backed value as an object", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1495
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1496
 testRunner.Given(string.Format("the dotnet backed JsonIdnEmail {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1497
 testRunner.When(string.Format("I compare the idnEmail to the object {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1498
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for json element backed value as a hostname")]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"www.example.com\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"Garbage\"", "\"www.example.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"Goodbye\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("null", "null", "true", null)]
        [NUnit.Framework.TestCaseAttribute("null", "\"www.example.com\"", "false", null)]
        public virtual void EqualsForJsonElementBackedValueAsAHostname(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for json element backed value as a hostname", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1529
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1530
 testRunner.Given(string.Format("the JsonElement backed JsonHostname {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1531
 testRunner.When(string.Format("I compare it to the hostname {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1532
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for dotnet backed value as a hostname")]
        [NUnit.Framework.TestCaseAttribute("\"Garbage\"", "\"www.example.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"www.example.com\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"Goodbye\"", "false", null)]
        public virtual void EqualsForDotnetBackedValueAsAHostname(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for dotnet backed value as a hostname", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1542
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1543
 testRunner.Given(string.Format("the dotnet backed JsonHostname {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1544
 testRunner.When(string.Format("I compare it to the hostname {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1545
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for hostname json element backed value as an IJsonValue")]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"Hello\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"Goodbye\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "1.1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "[1,2,3]", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "{ \"first\": \"1\" }", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "true", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "false", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"2018-11-13T20:20:39+00:00\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"Garbage\"", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"hello@endjin.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"www.example.com\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"http://foo.bar/?baz=qux#quux\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"{ \\\"first\\\": \\\"1\\\" }\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"192.168.0.1\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"0:0:0:0:0:ffff:c0a8:0001\"", "false", null)]
        public virtual void EqualsForHostnameJsonElementBackedValueAsAnIJsonValue(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for hostname json element backed value as an IJsonValue", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1553
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1554
 testRunner.Given(string.Format("the JsonElement backed JsonHostname {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1555
 testRunner.When(string.Format("I compare the hostname to the IJsonValue {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1556
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for hostname dotnet backed value as an IJsonValue")]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"Hello\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"Goodbye\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "1.1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "[1,2,3]", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "{ \"first\": \"1\" }", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "true", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "false", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"2018-11-13T20:20:39+00:00\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"Garbage\"", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"hello@endjin.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"www.example.com\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"http://foo.bar/?baz=qux#quux\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"{ \\\"first\\\": \\\"1\\\" }\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"192.168.0.1\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"0:0:0:0:0:ffff:c0a8:0001\"", "false", null)]
        public virtual void EqualsForHostnameDotnetBackedValueAsAnIJsonValue(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for hostname dotnet backed value as an IJsonValue", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1580
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1581
 testRunner.Given(string.Format("the dotnet backed JsonHostname {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1582
 testRunner.When(string.Format("I compare the hostname to the IJsonValue {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1583
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for hostname json element backed value as an object")]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"Hello\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"Goodbye\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "1.1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "[1,2,3]", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "{ \"first\": \"1\" }", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "true", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "false", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"2018-11-13T20:20:39+00:00\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"hello@endjin.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"www.example.com\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"http://foo.bar/?baz=qux#quux\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"{ \\\"first\\\": \\\"1\\\" }\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"192.168.0.1\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"0:0:0:0:0:ffff:c0a8:0001\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "<new object()>", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "null", "false", null)]
        public virtual void EqualsForHostnameJsonElementBackedValueAsAnObject(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for hostname json element backed value as an object", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1607
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1608
 testRunner.Given(string.Format("the JsonElement backed JsonHostname {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1609
 testRunner.When(string.Format("I compare the hostname to the object {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1610
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for hostname dotnet backed value as an object")]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"Hello\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"Goodbye\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "1.1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "[1,2,3]", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "{ \"first\": \"1\" }", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "true", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "false", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"2018-11-13T20:20:39+00:00\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"hello@endjin.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"www.example.com\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"http://foo.bar/?baz=qux#quux\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"{ \\\"first\\\": \\\"1\\\" }\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"192.168.0.1\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"0:0:0:0:0:ffff:c0a8:0001\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "<new object()>", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "null", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "<null>", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "<undefined>", "false", null)]
        [NUnit.Framework.TestCaseAttribute("null", "null", "true", null)]
        [NUnit.Framework.TestCaseAttribute("null", "<null>", "true", null)]
        [NUnit.Framework.TestCaseAttribute("null", "<undefined>", "false", null)]
        public virtual void EqualsForHostnameDotnetBackedValueAsAnObject(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for hostname dotnet backed value as an object", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1635
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1636
 testRunner.Given(string.Format("the dotnet backed JsonHostname {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1637
 testRunner.When(string.Format("I compare the hostname to the object {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1638
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for json element backed value as a idnHostname")]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"www.example.com\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"Garbage\"", "\"www.example.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"Goodbye\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("null", "null", "true", null)]
        [NUnit.Framework.TestCaseAttribute("null", "\"www.example.com\"", "false", null)]
        public virtual void EqualsForJsonElementBackedValueAsAIdnHostname(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for json element backed value as a idnHostname", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1669
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1670
 testRunner.Given(string.Format("the JsonElement backed JsonIdnHostname {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1671
 testRunner.When(string.Format("I compare it to the idnHostname {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1672
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for dotnet backed value as a idnHostname")]
        [NUnit.Framework.TestCaseAttribute("\"Garbage\"", "\"www.example.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"www.example.com\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"Goodbye\"", "false", null)]
        public virtual void EqualsForDotnetBackedValueAsAIdnHostname(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for dotnet backed value as a idnHostname", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1682
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1683
 testRunner.Given(string.Format("the dotnet backed JsonIdnHostname {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1684
 testRunner.When(string.Format("I compare it to the idnHostname {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1685
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for idnHostname json element backed value as an IJsonValue")]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"Hello\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"Goodbye\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "1.1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "[1,2,3]", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "{ \"first\": \"1\" }", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "true", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "false", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"2018-11-13T20:20:39+00:00\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"Garbage\"", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"hello@endjin.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"www.example.com\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"http://foo.bar/?baz=qux#quux\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"{ \\\"first\\\": \\\"1\\\" }\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"192.168.0.1\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"0:0:0:0:0:ffff:c0a8:0001\"", "false", null)]
        public virtual void EqualsForIdnHostnameJsonElementBackedValueAsAnIJsonValue(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for idnHostname json element backed value as an IJsonValue", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1693
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1694
 testRunner.Given(string.Format("the JsonElement backed JsonIdnHostname {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1695
 testRunner.When(string.Format("I compare the idnHostname to the IJsonValue {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1696
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for idnHostname dotnet backed value as an IJsonValue")]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"Hello\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"Goodbye\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "1.1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "[1,2,3]", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "{ \"first\": \"1\" }", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "true", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "false", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"2018-11-13T20:20:39+00:00\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"Garbage\"", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"hello@endjin.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"www.example.com\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"http://foo.bar/?baz=qux#quux\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"{ \\\"first\\\": \\\"1\\\" }\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"192.168.0.1\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"0:0:0:0:0:ffff:c0a8:0001\"", "false", null)]
        public virtual void EqualsForIdnHostnameDotnetBackedValueAsAnIJsonValue(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for idnHostname dotnet backed value as an IJsonValue", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1720
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1721
 testRunner.Given(string.Format("the dotnet backed JsonIdnHostname {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1722
 testRunner.When(string.Format("I compare the idnHostname to the IJsonValue {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1723
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for idnHostname json element backed value as an object")]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"Hello\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"Goodbye\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "1.1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "[1,2,3]", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "{ \"first\": \"1\" }", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "true", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "false", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"2018-11-13T20:20:39+00:00\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"hello@endjin.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"www.example.com\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"http://foo.bar/?baz=qux#quux\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"{ \\\"first\\\": \\\"1\\\" }\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"192.168.0.1\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"0:0:0:0:0:ffff:c0a8:0001\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "<new object()>", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "null", "false", null)]
        public virtual void EqualsForIdnHostnameJsonElementBackedValueAsAnObject(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for idnHostname json element backed value as an object", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1747
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1748
 testRunner.Given(string.Format("the JsonElement backed JsonIdnHostname {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1749
 testRunner.When(string.Format("I compare the idnHostname to the object {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1750
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for idnHostname dotnet backed value as an object")]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"Hello\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"Goodbye\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "1.1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "[1,2,3]", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "{ \"first\": \"1\" }", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "true", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "false", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"2018-11-13T20:20:39+00:00\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"hello@endjin.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"www.example.com\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"http://foo.bar/?baz=qux#quux\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"{ \\\"first\\\": \\\"1\\\" }\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"192.168.0.1\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "\"0:0:0:0:0:ffff:c0a8:0001\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "<new object()>", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "null", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "<null>", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"www.example.com\"", "<undefined>", "false", null)]
        [NUnit.Framework.TestCaseAttribute("null", "null", "true", null)]
        [NUnit.Framework.TestCaseAttribute("null", "<null>", "true", null)]
        [NUnit.Framework.TestCaseAttribute("null", "<undefined>", "false", null)]
        public virtual void EqualsForIdnHostnameDotnetBackedValueAsAnObject(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for idnHostname dotnet backed value as an object", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1775
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1776
 testRunner.Given(string.Format("the dotnet backed JsonIdnHostname {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1777
 testRunner.When(string.Format("I compare the idnHostname to the object {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1778
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for json element backed value as a integer")]
        [NUnit.Framework.TestCaseAttribute("1", "1", "true", null)]
        [NUnit.Framework.TestCaseAttribute("1", "3", "false", null)]
        [NUnit.Framework.TestCaseAttribute("null", "null", "true", null)]
        [NUnit.Framework.TestCaseAttribute("null", "1", "false", null)]
        public virtual void EqualsForJsonElementBackedValueAsAInteger(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for json element backed value as a integer", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1809
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1810
 testRunner.Given(string.Format("the JsonElement backed JsonInteger {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1811
 testRunner.When(string.Format("I compare it to the integer {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1812
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for dotnet backed value as a integer")]
        [NUnit.Framework.TestCaseAttribute("1", "1", "true", null)]
        [NUnit.Framework.TestCaseAttribute("1", "3", "false", null)]
        public virtual void EqualsForDotnetBackedValueAsAInteger(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for dotnet backed value as a integer", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1821
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1822
 testRunner.Given(string.Format("the dotnet backed JsonInteger {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1823
 testRunner.When(string.Format("I compare it to the integer {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1824
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for integer json element backed value as an IJsonValue")]
        [NUnit.Framework.TestCaseAttribute("1", "\"Hello\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("1", "\"Goodbye\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("1", "1", "true", null)]
        [NUnit.Framework.TestCaseAttribute("1", "1.1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("1", "[1,2,3]", "false", null)]
        [NUnit.Framework.TestCaseAttribute("1", "{ \"first\": \"1\" }", "false", null)]
        [NUnit.Framework.TestCaseAttribute("1", "true", "false", null)]
        [NUnit.Framework.TestCaseAttribute("1", "false", "false", null)]
        [NUnit.Framework.TestCaseAttribute("1", "\"2018-11-13T20:20:39+00:00\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("1", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("1", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("1", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("1", "\"hello@endjin.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("1", "\"www.example.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("1", "\"http://foo.bar/?baz=qux#quux\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("1", "\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("1", "\"{ \\\"first\\\": \\\"1\\\" }\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("1", "\"192.168.0.1\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("1", "\"0:0:0:0:0:ffff:c0a8:0001\"", "false", null)]
        public virtual void EqualsForIntegerJsonElementBackedValueAsAnIJsonValue(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for integer json element backed value as an IJsonValue", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1831
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1832
 testRunner.Given(string.Format("the JsonElement backed JsonInteger {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1833
 testRunner.When(string.Format("I compare the integer to the IJsonValue {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1834
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for integer dotnet backed value as an IJsonValue")]
        [NUnit.Framework.TestCaseAttribute("1", "\"Hello\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("1", "\"Goodbye\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("1", "1", "true", null)]
        [NUnit.Framework.TestCaseAttribute("1", "1.1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("1", "[1,2,3]", "false", null)]
        [NUnit.Framework.TestCaseAttribute("1", "{ \"first\": \"1\" }", "false", null)]
        [NUnit.Framework.TestCaseAttribute("1", "true", "false", null)]
        [NUnit.Framework.TestCaseAttribute("1", "false", "false", null)]
        [NUnit.Framework.TestCaseAttribute("1", "\"2018-11-13T20:20:39+00:00\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("1", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("1", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("1", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("1", "\"hello@endjin.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("1", "\"www.example.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("1", "\"http://foo.bar/?baz=qux#quux\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("1", "\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("1", "\"{ \\\"first\\\": \\\"1\\\" }\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("1", "\"192.168.0.1\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("1", "\"0:0:0:0:0:ffff:c0a8:0001\"", "false", null)]
        public virtual void EqualsForIntegerDotnetBackedValueAsAnIJsonValue(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for integer dotnet backed value as an IJsonValue", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1858
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1859
 testRunner.Given(string.Format("the dotnet backed JsonInteger {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1860
 testRunner.When(string.Format("I compare the integer to the IJsonValue {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1861
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for integer json element backed value as an object")]
        [NUnit.Framework.TestCaseAttribute("1", "\"Hello\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("1", "\"Goodbye\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("1", "1", "true", null)]
        [NUnit.Framework.TestCaseAttribute("1", "1.1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("1", "[1,2,3]", "false", null)]
        [NUnit.Framework.TestCaseAttribute("1", "{ \"first\": \"1\" }", "false", null)]
        [NUnit.Framework.TestCaseAttribute("1", "true", "false", null)]
        [NUnit.Framework.TestCaseAttribute("1", "false", "false", null)]
        [NUnit.Framework.TestCaseAttribute("1", "\"2018-11-13T20:20:39+00:00\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("1", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("1", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("1", "\"hello@endjin.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("1", "\"www.example.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("1", "\"http://foo.bar/?baz=qux#quux\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("1", "\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("1", "\"{ \\\"first\\\": \\\"1\\\" }\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("1", "\"192.168.0.1\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("1", "\"0:0:0:0:0:ffff:c0a8:0001\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("1", "<new object()>", "false", null)]
        [NUnit.Framework.TestCaseAttribute("1", "null", "false", null)]
        public virtual void EqualsForIntegerJsonElementBackedValueAsAnObject(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for integer json element backed value as an object", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1885
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1886
 testRunner.Given(string.Format("the JsonElement backed JsonInteger {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1887
 testRunner.When(string.Format("I compare the integer to the object {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1888
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for integer dotnet backed value as an object")]
        [NUnit.Framework.TestCaseAttribute("1", "\"Hello\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("1", "\"Goodbye\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("1", "1", "true", null)]
        [NUnit.Framework.TestCaseAttribute("1", "1.1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("1", "[1,2,3]", "false", null)]
        [NUnit.Framework.TestCaseAttribute("1", "{ \"first\": \"1\" }", "false", null)]
        [NUnit.Framework.TestCaseAttribute("1", "true", "false", null)]
        [NUnit.Framework.TestCaseAttribute("1", "false", "false", null)]
        [NUnit.Framework.TestCaseAttribute("1", "\"2018-11-13T20:20:39+00:00\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("1", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("1", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("1", "\"hello@endjin.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("1", "\"www.example.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("1", "\"http://foo.bar/?baz=qux#quux\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("1", "\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("1", "\"{ \\\"first\\\": \\\"1\\\" }\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("1", "\"192.168.0.1\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("1", "\"0:0:0:0:0:ffff:c0a8:0001\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("1", "<new object()>", "false", null)]
        [NUnit.Framework.TestCaseAttribute("1", "null", "false", null)]
        [NUnit.Framework.TestCaseAttribute("1", "<null>", "false", null)]
        [NUnit.Framework.TestCaseAttribute("1", "<undefined>", "false", null)]
        [NUnit.Framework.TestCaseAttribute("null", "null", "true", null)]
        [NUnit.Framework.TestCaseAttribute("null", "<null>", "true", null)]
        [NUnit.Framework.TestCaseAttribute("null", "<undefined>", "false", null)]
        public virtual void EqualsForIntegerDotnetBackedValueAsAnObject(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for integer dotnet backed value as an object", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1913
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1914
 testRunner.Given(string.Format("the dotnet backed JsonInteger {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1915
 testRunner.When(string.Format("I compare the integer to the object {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1916
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for json element backed value as a ipV4")]
        [NUnit.Framework.TestCaseAttribute("\"192.168.0.1\"", "\"192.168.0.1\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"192.168.0.1\"", "\"192.168.0.2\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("null", "null", "true", null)]
        [NUnit.Framework.TestCaseAttribute("null", "\"192.168.0.1\"", "false", null)]
        public virtual void EqualsForJsonElementBackedValueAsAIpV4(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for json element backed value as a ipV4", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1947
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1948
 testRunner.Given(string.Format("the JsonElement backed JsonIpV4 {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1949
 testRunner.When(string.Format("I compare it to the ipV4 {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1950
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for dotnet backed value as a ipV4")]
        [NUnit.Framework.TestCaseAttribute("\"192.168.0.1\"", "\"192.168.0.1\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"192.168.0.1\"", "\"192.168.0.2\"", "false", null)]
        public virtual void EqualsForDotnetBackedValueAsAIpV4(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for dotnet backed value as a ipV4", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1959
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1960
 testRunner.Given(string.Format("the dotnet backed JsonIpV4 {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1961
 testRunner.When(string.Format("I compare it to the ipV4 {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1962
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for ipV4 json element backed value as an IJsonValue")]
        [NUnit.Framework.TestCaseAttribute("\"192.168.0.1\"", "\"Hello\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"192.168.0.1\"", "\"Goodbye\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"192.168.0.1\"", "1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"192.168.0.1\"", "1.1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"192.168.0.1\"", "[1,2,3]", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"192.168.0.1\"", "{ \"first\": \"1\" }", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"192.168.0.1\"", "true", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"192.168.0.1\"", "false", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"192.168.0.1\"", "\"2018-11-13T20:20:39+00:00\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"192.168.0.1\"", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"192.168.0.1\"", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"192.168.0.1\"", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"192.168.0.1\"", "\"hello@endjin.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"192.168.0.1\"", "\"www.example.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"192.168.0.1\"", "\"http://foo.bar/?baz=qux#quux\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"192.168.0.1\"", "\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"192.168.0.1\"", "\"{ \\\"first\\\": \\\"1\\\" }\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"192.168.0.1\"", "\"0:0:0:0:0:ffff:c0a8:0001\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"192.168.0.1\"", "\"192.168.0.1\"", "true", null)]
        public virtual void EqualsForIpV4JsonElementBackedValueAsAnIJsonValue(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for ipV4 json element backed value as an IJsonValue", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1969
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1970
 testRunner.Given(string.Format("the JsonElement backed JsonIpV4 {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1971
 testRunner.When(string.Format("I compare the ipV4 to the IJsonValue {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1972
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for ipV4 dotnet backed value as an IJsonValue")]
        [NUnit.Framework.TestCaseAttribute("\"192.168.0.1\"", "\"Hello\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"192.168.0.1\"", "\"Goodbye\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"192.168.0.1\"", "1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"192.168.0.1\"", "1.1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"192.168.0.1\"", "[1,2,3]", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"192.168.0.1\"", "{ \"first\": \"1\" }", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"192.168.0.1\"", "true", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"192.168.0.1\"", "false", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"192.168.0.1\"", "\"2018-11-13T20:20:39+00:00\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"192.168.0.1\"", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"192.168.0.1\"", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"192.168.0.1\"", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"192.168.0.1\"", "\"hello@endjin.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"192.168.0.1\"", "\"www.example.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"192.168.0.1\"", "\"http://foo.bar/?baz=qux#quux\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"192.168.0.1\"", "\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"192.168.0.1\"", "\"{ \\\"first\\\": \\\"1\\\" }\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"192.168.0.1\"", "\"0:0:0:0:0:ffff:c0a8:0001\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"192.168.0.1\"", "\"192.168.0.1\"", "true", null)]
        public virtual void EqualsForIpV4DotnetBackedValueAsAnIJsonValue(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for ipV4 dotnet backed value as an IJsonValue", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 1996
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 1997
 testRunner.Given(string.Format("the dotnet backed JsonIpV4 {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 1998
 testRunner.When(string.Format("I compare the ipV4 to the IJsonValue {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 1999
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for ipV4 json element backed value as an object")]
        [NUnit.Framework.TestCaseAttribute("\"192.168.0.1\"", "\"Hello\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"192.168.0.1\"", "\"Goodbye\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"192.168.0.1\"", "1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"192.168.0.1\"", "1.1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"192.168.0.1\"", "[1,2,3]", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"192.168.0.1\"", "{ \"first\": \"1\" }", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"192.168.0.1\"", "true", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"192.168.0.1\"", "false", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"192.168.0.1\"", "\"2018-11-13T20:20:39+00:00\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"192.168.0.1\"", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"192.168.0.1\"", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"192.168.0.1\"", "\"hello@endjin.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"192.168.0.1\"", "\"www.example.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"192.168.0.1\"", "\"http://foo.bar/?baz=qux#quux\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"192.168.0.1\"", "\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"192.168.0.1\"", "\"{ \\\"first\\\": \\\"1\\\" }\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"192.168.0.1\"", "<new object()>", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"192.168.0.1\"", "\"192.168.0.1\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"192.168.0.1\"", "\"0:0:0:0:0:ffff:c0a8:0001\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"192.168.0.1\"", "null", "false", null)]
        public virtual void EqualsForIpV4JsonElementBackedValueAsAnObject(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for ipV4 json element backed value as an object", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 2023
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 2024
 testRunner.Given(string.Format("the JsonElement backed JsonIpV4 {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 2025
 testRunner.When(string.Format("I compare the ipV4 to the object {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 2026
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for ipV4 dotnet backed value as an object")]
        [NUnit.Framework.TestCaseAttribute("\"192.168.0.1\"", "\"Hello\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"192.168.0.1\"", "\"Goodbye\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"192.168.0.1\"", "1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"192.168.0.1\"", "1.1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"192.168.0.1\"", "[1,2,3]", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"192.168.0.1\"", "{ \"first\": \"1\" }", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"192.168.0.1\"", "true", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"192.168.0.1\"", "false", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"192.168.0.1\"", "\"2018-11-13T20:20:39+00:00\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"192.168.0.1\"", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"192.168.0.1\"", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"192.168.0.1\"", "\"hello@endjin.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"192.168.0.1\"", "\"www.example.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"192.168.0.1\"", "\"http://foo.bar/?baz=qux#quux\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"192.168.0.1\"", "\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"192.168.0.1\"", "\"{ \\\"first\\\": \\\"1\\\" }\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"192.168.0.1\"", "\"192.168.0.1\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"192.168.0.1\"", "\"0:0:0:0:0:ffff:c0a8:0001\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"192.168.0.1\"", "<new object()>", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"192.168.0.1\"", "null", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"192.168.0.1\"", "<null>", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"192.168.0.1\"", "<undefined>", "false", null)]
        [NUnit.Framework.TestCaseAttribute("null", "null", "true", null)]
        [NUnit.Framework.TestCaseAttribute("null", "<null>", "true", null)]
        [NUnit.Framework.TestCaseAttribute("null", "<undefined>", "false", null)]
        public virtual void EqualsForIpV4DotnetBackedValueAsAnObject(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for ipV4 dotnet backed value as an object", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 2051
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 2052
 testRunner.Given(string.Format("the dotnet backed JsonIpV4 {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 2053
 testRunner.When(string.Format("I compare the ipV4 to the object {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 2054
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for json element backed value as a ipV6")]
        [NUnit.Framework.TestCaseAttribute("\"0:0:0:0:0:ffff:c0a8:0001\"", "\"0:0:0:0:0:ffff:c0a8:0001\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"0:0:0:0:0:ffff:c0a8:0001\"", "\"0:0:0:0:0:ffff:c0a8:0002\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("null", "null", "true", null)]
        [NUnit.Framework.TestCaseAttribute("null", "\"0:0:0:0:0:ffff:c0a8:0001\"", "false", null)]
        public virtual void EqualsForJsonElementBackedValueAsAIpV6(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for json element backed value as a ipV6", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 2085
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 2086
 testRunner.Given(string.Format("the JsonElement backed JsonIpV6 {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 2087
 testRunner.When(string.Format("I compare it to the ipV6 {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 2088
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for dotnet backed value as a ipV6")]
        [NUnit.Framework.TestCaseAttribute("\"0:0:0:0:0:ffff:c0a8:0001\"", "\"0:0:0:0:0:ffff:c0a8:0001\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"0:0:0:0:0:ffff:c0a8:0001\"", "\"0:0:0:0:0:ffff:c0a8:0002\"", "false", null)]
        public virtual void EqualsForDotnetBackedValueAsAIpV6(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for dotnet backed value as a ipV6", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 2097
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 2098
 testRunner.Given(string.Format("the dotnet backed JsonIpV6 {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 2099
 testRunner.When(string.Format("I compare it to the ipV6 {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 2100
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for ipV6 json element backed value as an IJsonValue")]
        [NUnit.Framework.TestCaseAttribute("\"0:0:0:0:0:ffff:c0a8:0001\"", "\"Hello\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"0:0:0:0:0:ffff:c0a8:0001\"", "\"Goodbye\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"0:0:0:0:0:ffff:c0a8:0001\"", "1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"0:0:0:0:0:ffff:c0a8:0001\"", "1.1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"0:0:0:0:0:ffff:c0a8:0001\"", "[1,2,3]", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"0:0:0:0:0:ffff:c0a8:0001\"", "{ \"first\": \"1\" }", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"0:0:0:0:0:ffff:c0a8:0001\"", "true", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"0:0:0:0:0:ffff:c0a8:0001\"", "false", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"0:0:0:0:0:ffff:c0a8:0001\"", "\"2018-11-13T20:20:39+00:00\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"0:0:0:0:0:ffff:c0a8:0001\"", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"0:0:0:0:0:ffff:c0a8:0001\"", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"0:0:0:0:0:ffff:c0a8:0001\"", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"0:0:0:0:0:ffff:c0a8:0001\"", "\"hello@endjin.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"0:0:0:0:0:ffff:c0a8:0001\"", "\"www.example.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"0:0:0:0:0:ffff:c0a8:0001\"", "\"http://foo.bar/?baz=qux#quux\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"0:0:0:0:0:ffff:c0a8:0001\"", "\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"0:0:0:0:0:ffff:c0a8:0001\"", "\"{ \\\"first\\\": \\\"1\\\" }\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"0:0:0:0:0:ffff:c0a8:0001\"", "\"192.168.0.1\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"0:0:0:0:0:ffff:c0a8:0001\"", "\"0:0:0:0:0:ffff:c0a8:0001\"", "true", null)]
        public virtual void EqualsForIpV6JsonElementBackedValueAsAnIJsonValue(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for ipV6 json element backed value as an IJsonValue", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 2107
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 2108
 testRunner.Given(string.Format("the JsonElement backed JsonIpV6 {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 2109
 testRunner.When(string.Format("I compare the ipV6 to the IJsonValue {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 2110
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for ipV6 dotnet backed value as an IJsonValue")]
        [NUnit.Framework.TestCaseAttribute("\"0:0:0:0:0:ffff:c0a8:0001\"", "\"Hello\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"0:0:0:0:0:ffff:c0a8:0001\"", "\"Goodbye\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"0:0:0:0:0:ffff:c0a8:0001\"", "1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"0:0:0:0:0:ffff:c0a8:0001\"", "1.1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"0:0:0:0:0:ffff:c0a8:0001\"", "[1,2,3]", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"0:0:0:0:0:ffff:c0a8:0001\"", "{ \"first\": \"1\" }", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"0:0:0:0:0:ffff:c0a8:0001\"", "true", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"0:0:0:0:0:ffff:c0a8:0001\"", "false", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"0:0:0:0:0:ffff:c0a8:0001\"", "\"2018-11-13T20:20:39+00:00\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"0:0:0:0:0:ffff:c0a8:0001\"", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"0:0:0:0:0:ffff:c0a8:0001\"", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"0:0:0:0:0:ffff:c0a8:0001\"", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"0:0:0:0:0:ffff:c0a8:0001\"", "\"hello@endjin.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"0:0:0:0:0:ffff:c0a8:0001\"", "\"www.example.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"0:0:0:0:0:ffff:c0a8:0001\"", "\"http://foo.bar/?baz=qux#quux\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"0:0:0:0:0:ffff:c0a8:0001\"", "\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"0:0:0:0:0:ffff:c0a8:0001\"", "\"{ \\\"first\\\": \\\"1\\\" }\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"0:0:0:0:0:ffff:c0a8:0001\"", "\"192.168.0.1\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"0:0:0:0:0:ffff:c0a8:0001\"", "\"0:0:0:0:0:ffff:c0a8:0001\"", "true", null)]
        public virtual void EqualsForIpV6DotnetBackedValueAsAnIJsonValue(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for ipV6 dotnet backed value as an IJsonValue", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 2134
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 2135
 testRunner.Given(string.Format("the dotnet backed JsonIpV6 {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 2136
 testRunner.When(string.Format("I compare the ipV6 to the IJsonValue {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 2137
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for ipV6 json element backed value as an object")]
        [NUnit.Framework.TestCaseAttribute("\"0:0:0:0:0:ffff:c0a8:0001\"", "\"Hello\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"0:0:0:0:0:ffff:c0a8:0001\"", "\"Goodbye\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"0:0:0:0:0:ffff:c0a8:0001\"", "1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"0:0:0:0:0:ffff:c0a8:0001\"", "1.1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"0:0:0:0:0:ffff:c0a8:0001\"", "[1,2,3]", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"0:0:0:0:0:ffff:c0a8:0001\"", "{ \"first\": \"1\" }", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"0:0:0:0:0:ffff:c0a8:0001\"", "true", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"0:0:0:0:0:ffff:c0a8:0001\"", "false", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"0:0:0:0:0:ffff:c0a8:0001\"", "\"2018-11-13T20:20:39+00:00\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"0:0:0:0:0:ffff:c0a8:0001\"", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"0:0:0:0:0:ffff:c0a8:0001\"", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"0:0:0:0:0:ffff:c0a8:0001\"", "\"hello@endjin.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"0:0:0:0:0:ffff:c0a8:0001\"", "\"www.example.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"0:0:0:0:0:ffff:c0a8:0001\"", "\"http://foo.bar/?baz=qux#quux\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"0:0:0:0:0:ffff:c0a8:0001\"", "\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"0:0:0:0:0:ffff:c0a8:0001\"", "\"{ \\\"first\\\": \\\"1\\\" }\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"0:0:0:0:0:ffff:c0a8:0001\"", "\"192.168.0.1\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"0:0:0:0:0:ffff:c0a8:0001\"", "\"0:0:0:0:0:ffff:c0a8:0001\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"0:0:0:0:0:ffff:c0a8:0001\"", "<new object()>", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"0:0:0:0:0:ffff:c0a8:0001\"", "null", "false", null)]
        public virtual void EqualsForIpV6JsonElementBackedValueAsAnObject(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for ipV6 json element backed value as an object", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 2161
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 2162
 testRunner.Given(string.Format("the JsonElement backed JsonIpV6 {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 2163
 testRunner.When(string.Format("I compare the ipV6 to the object {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 2164
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for ipV6 dotnet backed value as an object")]
        [NUnit.Framework.TestCaseAttribute("\"0:0:0:0:0:ffff:c0a8:0001\"", "\"Hello\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"0:0:0:0:0:ffff:c0a8:0001\"", "\"Goodbye\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"0:0:0:0:0:ffff:c0a8:0001\"", "1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"0:0:0:0:0:ffff:c0a8:0001\"", "1.1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"0:0:0:0:0:ffff:c0a8:0001\"", "[1,2,3]", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"0:0:0:0:0:ffff:c0a8:0001\"", "{ \"first\": \"1\" }", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"0:0:0:0:0:ffff:c0a8:0001\"", "true", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"0:0:0:0:0:ffff:c0a8:0001\"", "false", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"0:0:0:0:0:ffff:c0a8:0001\"", "\"2018-11-13T20:20:39+00:00\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"0:0:0:0:0:ffff:c0a8:0001\"", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"0:0:0:0:0:ffff:c0a8:0001\"", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"0:0:0:0:0:ffff:c0a8:0001\"", "\"hello@endjin.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"0:0:0:0:0:ffff:c0a8:0001\"", "\"www.example.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"0:0:0:0:0:ffff:c0a8:0001\"", "\"http://foo.bar/?baz=qux#quux\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"0:0:0:0:0:ffff:c0a8:0001\"", "\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"0:0:0:0:0:ffff:c0a8:0001\"", "\"{ \\\"first\\\": \\\"1\\\" }\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"0:0:0:0:0:ffff:c0a8:0001\"", "\"192.168.0.1\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"0:0:0:0:0:ffff:c0a8:0001\"", "\"0:0:0:0:0:ffff:c0a8:0001\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"0:0:0:0:0:ffff:c0a8:0001\"", "<new object()>", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"0:0:0:0:0:ffff:c0a8:0001\"", "null", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"0:0:0:0:0:ffff:c0a8:0001\"", "<null>", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"0:0:0:0:0:ffff:c0a8:0001\"", "<undefined>", "false", null)]
        [NUnit.Framework.TestCaseAttribute("null", "null", "true", null)]
        [NUnit.Framework.TestCaseAttribute("null", "<null>", "true", null)]
        [NUnit.Framework.TestCaseAttribute("null", "<undefined>", "false", null)]
        public virtual void EqualsForIpV6DotnetBackedValueAsAnObject(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for ipV6 dotnet backed value as an object", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 2189
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 2190
 testRunner.Given(string.Format("the dotnet backed JsonIpV6 {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 2191
 testRunner.When(string.Format("I compare the ipV6 to the object {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 2192
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for json element backed value as a uri")]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"http://foo.bar/?baz=qux#quux\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"http://jim.bob/?sue=sally#tina\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("null", "null", "true", null)]
        [NUnit.Framework.TestCaseAttribute("null", "\"http://foo.bar/?baz=qux#quux\"", "false", null)]
        public virtual void EqualsForJsonElementBackedValueAsAUri(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for json element backed value as a uri", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 2223
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 2224
 testRunner.Given(string.Format("the JsonElement backed JsonUri {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 2225
 testRunner.When(string.Format("I compare it to the uri {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 2226
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for dotnet backed value as a uri")]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"http://foo.bar/?baz=qux#quux\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"http://jim.bob/?sue=sally#tina\"", "false", null)]
        public virtual void EqualsForDotnetBackedValueAsAUri(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for dotnet backed value as a uri", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 2235
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 2236
 testRunner.Given(string.Format("the dotnet backed JsonUri {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 2237
 testRunner.When(string.Format("I compare it to the uri {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 2238
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for uri json element backed value as an IJsonValue")]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"Hello\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"Goodbye\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "1.1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "[1,2,3]", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "{ \"first\": \"1\" }", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "true", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "false", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"2018-11-13T20:20:39+00:00\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"hello@endjin.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"www.example.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"http://foo.bar/?baz=qux#quux\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"{ \\\"first\\\": \\\"1\\\" }\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"192.168.0.1\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"0:0:0:0:0:ffff:c0a8:0001\"", "false", null)]
        public virtual void EqualsForUriJsonElementBackedValueAsAnIJsonValue(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for uri json element backed value as an IJsonValue", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 2245
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 2246
 testRunner.Given(string.Format("the JsonElement backed JsonUri {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 2247
 testRunner.When(string.Format("I compare the uri to the IJsonValue {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 2248
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for uri dotnet backed value as an IJsonValue")]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"Hello\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"Goodbye\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "1.1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "[1,2,3]", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "{ \"first\": \"1\" }", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "true", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "false", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"2018-11-13T20:20:39+00:00\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"hello@endjin.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"www.example.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"http://foo.bar/?baz=qux#quux\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"{ \\\"first\\\": \\\"1\\\" }\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"192.168.0.1\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"0:0:0:0:0:ffff:c0a8:0001\"", "false", null)]
        public virtual void EqualsForUriDotnetBackedValueAsAnIJsonValue(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for uri dotnet backed value as an IJsonValue", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 2272
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 2273
 testRunner.Given(string.Format("the dotnet backed JsonUri {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 2274
 testRunner.When(string.Format("I compare the uri to the IJsonValue {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 2275
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for uri json element backed value as an object")]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"Hello\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"Goodbye\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "1.1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "[1,2,3]", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "{ \"first\": \"1\" }", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "true", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "false", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"2018-11-13T20:20:39+00:00\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"hello@endjin.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"www.example.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"http://foo.bar/?baz=qux#quux\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"{ \\\"first\\\": \\\"1\\\" }\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"192.168.0.1\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"0:0:0:0:0:ffff:c0a8:0001\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "<new object()>", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "null", "false", null)]
        public virtual void EqualsForUriJsonElementBackedValueAsAnObject(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for uri json element backed value as an object", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 2299
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 2300
 testRunner.Given(string.Format("the JsonElement backed JsonUri {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 2301
 testRunner.When(string.Format("I compare the uri to the object {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 2302
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for uri dotnet backed value as an object")]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"Hello\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"Goodbye\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "1.1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "[1,2,3]", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "{ \"first\": \"1\" }", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "true", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "false", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"2018-11-13T20:20:39+00:00\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"hello@endjin.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"www.example.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"http://foo.bar/?baz=qux#quux\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"{ \\\"first\\\": \\\"1\\\" }\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"192.168.0.1\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"0:0:0:0:0:ffff:c0a8:0001\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "<new object()>", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "null", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "<null>", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "<undefined>", "false", null)]
        [NUnit.Framework.TestCaseAttribute("null", "null", "true", null)]
        [NUnit.Framework.TestCaseAttribute("null", "<null>", "true", null)]
        [NUnit.Framework.TestCaseAttribute("null", "<undefined>", "false", null)]
        public virtual void EqualsForUriDotnetBackedValueAsAnObject(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for uri dotnet backed value as an object", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 2327
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 2328
 testRunner.Given(string.Format("the dotnet backed JsonUri {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 2329
 testRunner.When(string.Format("I compare the uri to the object {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 2330
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for json element backed value as a uriReference")]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"http://foo.bar/?baz=qux#quux\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"http://jim.bob/?sue=sally#tina\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("null", "null", "true", null)]
        [NUnit.Framework.TestCaseAttribute("null", "\"http://foo.bar/?baz=qux#quux\"", "false", null)]
        public virtual void EqualsForJsonElementBackedValueAsAUriReference(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for json element backed value as a uriReference", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 2361
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 2362
 testRunner.Given(string.Format("the JsonElement backed JsonUriReference {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 2363
 testRunner.When(string.Format("I compare it to the uriReference {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 2364
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for dotnet backed value as a uriReference")]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"http://foo.bar/?baz=qux#quux\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"http://jim.bob/?sue=sally#tina\"", "false", null)]
        public virtual void EqualsForDotnetBackedValueAsAUriReference(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for dotnet backed value as a uriReference", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 2373
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 2374
 testRunner.Given(string.Format("the dotnet backed JsonUriReference {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 2375
 testRunner.When(string.Format("I compare it to the uriReference {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 2376
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for uriReference json element backed value as an IJsonValue")]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"Hello\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"Goodbye\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "1.1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "[1,2,3]", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "{ \"first\": \"1\" }", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "true", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "false", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"2018-11-13T20:20:39+00:00\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"hello@endjin.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"www.example.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"http://foo.bar/?baz=qux#quux\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"{ \\\"first\\\": \\\"1\\\" }\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"192.168.0.1\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"0:0:0:0:0:ffff:c0a8:0001\"", "false", null)]
        public virtual void EqualsForUriReferenceJsonElementBackedValueAsAnIJsonValue(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for uriReference json element backed value as an IJsonValue", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 2383
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 2384
 testRunner.Given(string.Format("the JsonElement backed JsonUriReference {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 2385
 testRunner.When(string.Format("I compare the uriReference to the IJsonValue {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 2386
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for uriReference dotnet backed value as an IJsonValue")]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"Hello\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"Goodbye\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "1.1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "[1,2,3]", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "{ \"first\": \"1\" }", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "true", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "false", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"2018-11-13T20:20:39+00:00\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"hello@endjin.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"www.example.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"http://foo.bar/?baz=qux#quux\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"{ \\\"first\\\": \\\"1\\\" }\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"192.168.0.1\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"0:0:0:0:0:ffff:c0a8:0001\"", "false", null)]
        public virtual void EqualsForUriReferenceDotnetBackedValueAsAnIJsonValue(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for uriReference dotnet backed value as an IJsonValue", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 2410
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 2411
 testRunner.Given(string.Format("the dotnet backed JsonUriReference {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 2412
 testRunner.When(string.Format("I compare the uriReference to the IJsonValue {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 2413
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for uriReference json element backed value as an object")]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"Hello\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"Goodbye\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "1.1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "[1,2,3]", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "{ \"first\": \"1\" }", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "true", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "false", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"2018-11-13T20:20:39+00:00\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"hello@endjin.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"www.example.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"http://foo.bar/?baz=qux#quux\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"{ \\\"first\\\": \\\"1\\\" }\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"192.168.0.1\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"0:0:0:0:0:ffff:c0a8:0001\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "<new object()>", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "null", "false", null)]
        public virtual void EqualsForUriReferenceJsonElementBackedValueAsAnObject(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for uriReference json element backed value as an object", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 2437
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 2438
 testRunner.Given(string.Format("the JsonElement backed JsonUriReference {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 2439
 testRunner.When(string.Format("I compare the uriReference to the object {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 2440
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for uriReference dotnet backed value as an object")]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"Hello\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"Goodbye\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "1.1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "[1,2,3]", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "{ \"first\": \"1\" }", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "true", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "false", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"2018-11-13T20:20:39+00:00\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"hello@endjin.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"www.example.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"http://foo.bar/?baz=qux#quux\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"{ \\\"first\\\": \\\"1\\\" }\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"192.168.0.1\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"0:0:0:0:0:ffff:c0a8:0001\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "<new object()>", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "null", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "<null>", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "<undefined>", "false", null)]
        [NUnit.Framework.TestCaseAttribute("null", "null", "true", null)]
        [NUnit.Framework.TestCaseAttribute("null", "<null>", "true", null)]
        [NUnit.Framework.TestCaseAttribute("null", "<undefined>", "false", null)]
        public virtual void EqualsForUriReferenceDotnetBackedValueAsAnObject(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for uriReference dotnet backed value as an object", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 2465
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 2466
 testRunner.Given(string.Format("the dotnet backed JsonUriReference {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 2467
 testRunner.When(string.Format("I compare the uriReference to the object {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 2468
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for json element backed value as a iri")]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"http://foo.bar/?baz=qux#quux\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"http://jim.bob/?sue=sally#tina\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("null", "null", "true", null)]
        [NUnit.Framework.TestCaseAttribute("null", "\"http://foo.bar/?baz=qux#quux\"", "false", null)]
        public virtual void EqualsForJsonElementBackedValueAsAIri(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for json element backed value as a iri", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 2499
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 2500
 testRunner.Given(string.Format("the JsonElement backed JsonIri {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 2501
 testRunner.When(string.Format("I compare it to the iri {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 2502
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for dotnet backed value as a iri")]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"http://foo.bar/?baz=qux#quux\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"http://jim.bob/?sue=sally#tina\"", "false", null)]
        public virtual void EqualsForDotnetBackedValueAsAIri(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for dotnet backed value as a iri", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 2511
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 2512
 testRunner.Given(string.Format("the dotnet backed JsonIri {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 2513
 testRunner.When(string.Format("I compare it to the iri {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 2514
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for iri json element backed value as an IJsonValue")]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"Hello\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"Goodbye\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "1.1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "[1,2,3]", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "{ \"first\": \"1\" }", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "true", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "false", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"2018-11-13T20:20:39+00:00\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"hello@endjin.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"www.example.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"http://foo.bar/?baz=qux#quux\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"{ \\\"first\\\": \\\"1\\\" }\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"192.168.0.1\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"0:0:0:0:0:ffff:c0a8:0001\"", "false", null)]
        public virtual void EqualsForIriJsonElementBackedValueAsAnIJsonValue(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for iri json element backed value as an IJsonValue", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 2521
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 2522
 testRunner.Given(string.Format("the JsonElement backed JsonIri {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 2523
 testRunner.When(string.Format("I compare the iri to the IJsonValue {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 2524
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for iri dotnet backed value as an IJsonValue")]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"Hello\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"Goodbye\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "1.1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "[1,2,3]", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "{ \"first\": \"1\" }", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "true", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "false", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"2018-11-13T20:20:39+00:00\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"hello@endjin.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"www.example.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"http://foo.bar/?baz=qux#quux\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"{ \\\"first\\\": \\\"1\\\" }\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"192.168.0.1\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"0:0:0:0:0:ffff:c0a8:0001\"", "false", null)]
        public virtual void EqualsForIriDotnetBackedValueAsAnIJsonValue(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for iri dotnet backed value as an IJsonValue", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 2548
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 2549
 testRunner.Given(string.Format("the dotnet backed JsonIri {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 2550
 testRunner.When(string.Format("I compare the iri to the IJsonValue {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 2551
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for iri json element backed value as an object")]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"Hello\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"Goodbye\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "1.1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "[1,2,3]", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "{ \"first\": \"1\" }", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "true", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "false", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"2018-11-13T20:20:39+00:00\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"hello@endjin.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"www.example.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"http://foo.bar/?baz=qux#quux\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"{ \\\"first\\\": \\\"1\\\" }\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"192.168.0.1\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"0:0:0:0:0:ffff:c0a8:0001\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "<new object()>", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "null", "false", null)]
        public virtual void EqualsForIriJsonElementBackedValueAsAnObject(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for iri json element backed value as an object", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 2575
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 2576
 testRunner.Given(string.Format("the JsonElement backed JsonIri {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 2577
 testRunner.When(string.Format("I compare the iri to the object {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 2578
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for iri dotnet backed value as an object")]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"Hello\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"Goodbye\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "1.1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "[1,2,3]", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "{ \"first\": \"1\" }", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "true", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "false", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"2018-11-13T20:20:39+00:00\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"hello@endjin.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"www.example.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"http://foo.bar/?baz=qux#quux\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"{ \\\"first\\\": \\\"1\\\" }\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"192.168.0.1\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"0:0:0:0:0:ffff:c0a8:0001\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "<new object()>", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "null", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "<null>", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "<undefined>", "false", null)]
        [NUnit.Framework.TestCaseAttribute("null", "null", "true", null)]
        [NUnit.Framework.TestCaseAttribute("null", "<null>", "true", null)]
        [NUnit.Framework.TestCaseAttribute("null", "<undefined>", "false", null)]
        public virtual void EqualsForIriDotnetBackedValueAsAnObject(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for iri dotnet backed value as an object", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 2603
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 2604
 testRunner.Given(string.Format("the dotnet backed JsonIri {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 2605
 testRunner.When(string.Format("I compare the iri to the object {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 2606
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for json element backed value as a iriReference")]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"http://foo.bar/?baz=qux#quux\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"http://jim.bob/?sue=sally#tina\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("null", "null", "true", null)]
        [NUnit.Framework.TestCaseAttribute("null", "\"http://foo.bar/?baz=qux#quux\"", "false", null)]
        public virtual void EqualsForJsonElementBackedValueAsAIriReference(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for json element backed value as a iriReference", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 2637
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 2638
 testRunner.Given(string.Format("the JsonElement backed JsonIriReference {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 2639
 testRunner.When(string.Format("I compare it to the iriReference {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 2640
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for dotnet backed value as a iriReference")]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"http://foo.bar/?baz=qux#quux\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"http://jim.bob/?sue=sally#tina\"", "false", null)]
        public virtual void EqualsForDotnetBackedValueAsAIriReference(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for dotnet backed value as a iriReference", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 2649
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 2650
 testRunner.Given(string.Format("the dotnet backed JsonIriReference {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 2651
 testRunner.When(string.Format("I compare it to the iriReference {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 2652
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for iriReference json element backed value as an IJsonValue")]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"Hello\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"Goodbye\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "1.1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "[1,2,3]", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "{ \"first\": \"1\" }", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "true", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "false", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"2018-11-13T20:20:39+00:00\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"hello@endjin.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"www.example.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"http://foo.bar/?baz=qux#quux\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"{ \\\"first\\\": \\\"1\\\" }\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"192.168.0.1\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"0:0:0:0:0:ffff:c0a8:0001\"", "false", null)]
        public virtual void EqualsForIriReferenceJsonElementBackedValueAsAnIJsonValue(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for iriReference json element backed value as an IJsonValue", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 2659
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 2660
 testRunner.Given(string.Format("the JsonElement backed JsonIriReference {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 2661
 testRunner.When(string.Format("I compare the iriReference to the IJsonValue {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 2662
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for iriReference dotnet backed value as an IJsonValue")]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"Hello\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"Goodbye\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "1.1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "[1,2,3]", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "{ \"first\": \"1\" }", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "true", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "false", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"2018-11-13T20:20:39+00:00\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"hello@endjin.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"www.example.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"http://foo.bar/?baz=qux#quux\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"{ \\\"first\\\": \\\"1\\\" }\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"192.168.0.1\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"0:0:0:0:0:ffff:c0a8:0001\"", "false", null)]
        public virtual void EqualsForIriReferenceDotnetBackedValueAsAnIJsonValue(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for iriReference dotnet backed value as an IJsonValue", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 2686
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 2687
 testRunner.Given(string.Format("the dotnet backed JsonIriReference {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 2688
 testRunner.When(string.Format("I compare the iriReference to the IJsonValue {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 2689
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for iriReference json element backed value as an object")]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"Hello\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"Goodbye\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "1.1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "[1,2,3]", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "{ \"first\": \"1\" }", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "true", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "false", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"2018-11-13T20:20:39+00:00\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"hello@endjin.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"www.example.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"http://foo.bar/?baz=qux#quux\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"{ \\\"first\\\": \\\"1\\\" }\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"192.168.0.1\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"0:0:0:0:0:ffff:c0a8:0001\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "<new object()>", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "null", "false", null)]
        public virtual void EqualsForIriReferenceJsonElementBackedValueAsAnObject(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for iriReference json element backed value as an object", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 2713
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 2714
 testRunner.Given(string.Format("the JsonElement backed JsonIriReference {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 2715
 testRunner.When(string.Format("I compare the iriReference to the object {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 2716
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Equals for iriReference dotnet backed value as an object")]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"Hello\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"Goodbye\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "1.1", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "[1,2,3]", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "{ \"first\": \"1\" }", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "true", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "false", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"2018-11-13T20:20:39+00:00\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"2018-11-13\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"P3Y6M4DT12H30M5S\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"hello@endjin.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"www.example.com\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"http://foo.bar/?baz=qux#quux\"", "true", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"eyAiaGVsbG8iOiAid29ybGQiIH0=\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"{ \\\"first\\\": \\\"1\\\" }\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"192.168.0.1\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "\"0:0:0:0:0:ffff:c0a8:0001\"", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "<new object()>", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "null", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "<null>", "false", null)]
        [NUnit.Framework.TestCaseAttribute("\"http://foo.bar/?baz=qux#quux\"", "<undefined>", "false", null)]
        [NUnit.Framework.TestCaseAttribute("null", "null", "true", null)]
        [NUnit.Framework.TestCaseAttribute("null", "<null>", "true", null)]
        [NUnit.Framework.TestCaseAttribute("null", "<undefined>", "false", null)]
        public virtual void EqualsForIriReferenceDotnetBackedValueAsAnObject(string jsonValue, string value, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValue", jsonValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Equals for iriReference dotnet backed value as an object", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 2741
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 2742
 testRunner.Given(string.Format("the dotnet backed JsonIriReference {0}", jsonValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 2743
 testRunner.When(string.Format("I compare the iriReference to the object {0}", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 2744
 testRunner.Then(string.Format("the result should be {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
