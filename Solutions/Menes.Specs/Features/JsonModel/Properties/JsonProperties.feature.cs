// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.7.0.0
//      SpecFlow Generator Version:3.7.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Features.JsonModel.Properties
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.7.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("JsonProperties")]
    public partial class JsonPropertiesFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "JsonProperties.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/JsonModel/Properties", "JsonProperties", "\tGetting, setting, adding and removing properties.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Remove properties from a JsonElement backed JsonProperty")]
        [NUnit.Framework.TestCaseAttribute("JsonObject", "foo", "{\"foo\": \"bar\"}", "string", null)]
        [NUnit.Framework.TestCaseAttribute("JsonAny", "foo", "{\"foo\": \"bar\"}", "string", null)]
        [NUnit.Framework.TestCaseAttribute("JsonNotAny", "foo", "{\"foo\": \"bar\"}", "string", null)]
        [NUnit.Framework.TestCaseAttribute("JsonObject", "foo", "{\"foo\": \"bar\"}", "ReadOnlySpan<char>", null)]
        [NUnit.Framework.TestCaseAttribute("JsonAny", "foo", "{\"foo\": \"bar\"}", "ReadOnlySpan<char>", null)]
        [NUnit.Framework.TestCaseAttribute("JsonNotAny", "foo", "{\"foo\": \"bar\"}", "ReadOnlySpan<char>", null)]
        [NUnit.Framework.TestCaseAttribute("JsonObject", "foo", "{\"foo\": \"bar\"}", "ReadOnlySpan<byte>", null)]
        [NUnit.Framework.TestCaseAttribute("JsonAny", "foo", "{\"foo\": \"bar\"}", "ReadOnlySpan<byte>", null)]
        [NUnit.Framework.TestCaseAttribute("JsonNotAny", "foo", "{\"foo\": \"bar\"}", "ReadOnlySpan<byte>", null)]
        [NUnit.Framework.TestCaseAttribute("JsonObject", "foo", "<undefined>", "string", null)]
        [NUnit.Framework.TestCaseAttribute("JsonAny", "foo", "<undefined>", "string", null)]
        [NUnit.Framework.TestCaseAttribute("JsonNotAny", "foo", "<undefined>", "string", null)]
        [NUnit.Framework.TestCaseAttribute("JsonObject", "foo", "<undefined>", "ReadOnlySpan<char>", null)]
        [NUnit.Framework.TestCaseAttribute("JsonAny", "foo", "<undefined>", "ReadOnlySpan<char>", null)]
        [NUnit.Framework.TestCaseAttribute("JsonNotAny", "foo", "<undefined>", "ReadOnlySpan<char>", null)]
        [NUnit.Framework.TestCaseAttribute("JsonObject", "foo", "<undefined>", "ReadOnlySpan<byte>", null)]
        [NUnit.Framework.TestCaseAttribute("JsonAny", "foo", "<undefined>", "ReadOnlySpan<byte>", null)]
        [NUnit.Framework.TestCaseAttribute("JsonNotAny", "foo", "<undefined>", "ReadOnlySpan<byte>", null)]
        [NUnit.Framework.TestCaseAttribute("JsonObject", "foo", "1.2", "string", null)]
        [NUnit.Framework.TestCaseAttribute("JsonAny", "foo", "1.2", "string", null)]
        [NUnit.Framework.TestCaseAttribute("JsonNotAny", "foo", "1.2", "string", null)]
        [NUnit.Framework.TestCaseAttribute("JsonObject", "foo", "1.2", "ReadOnlySpan<char>", null)]
        [NUnit.Framework.TestCaseAttribute("JsonAny", "foo", "1.2", "ReadOnlySpan<char>", null)]
        [NUnit.Framework.TestCaseAttribute("JsonNotAny", "foo", "1.2", "ReadOnlySpan<char>", null)]
        [NUnit.Framework.TestCaseAttribute("JsonObject", "foo", "1.2", "ReadOnlySpan<byte>", null)]
        [NUnit.Framework.TestCaseAttribute("JsonAny", "foo", "1.2", "ReadOnlySpan<byte>", null)]
        [NUnit.Framework.TestCaseAttribute("JsonNotAny", "foo", "1.2", "ReadOnlySpan<byte>", null)]
        public virtual void RemovePropertiesFromAJsonElementBackedJsonProperty(string jsonValueType, string propertyName, string value, string propertyNameType, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValueType", jsonValueType);
            argumentsOfScenario.Add("propertyName", propertyName);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("propertyNameType", propertyNameType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Remove properties from a JsonElement backed JsonProperty", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
 testRunner.Given(string.Format("the JsonElement backed {0}  {1}", jsonValueType, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 6
 testRunner.When(string.Format("I remove the property {0} from the {1} using a {2}", propertyName, jsonValueType, propertyNameType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 7
 testRunner.Then(string.Format("the property {0} should not be defined using {1}", propertyName, propertyNameType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Set properties to JsonElement backed JsonProperty")]
        [NUnit.Framework.TestCaseAttribute("JsonObject", "foo", "\"bar\"", "{\"foo\": \"baz\"}", "string", null)]
        [NUnit.Framework.TestCaseAttribute("JsonAny", "foo", "\"bar\"", "{\"foo\": \"baz\"}", "string", null)]
        [NUnit.Framework.TestCaseAttribute("JsonNotAny", "foo", "\"bar\"", "{\"foo\": \"baz\"}", "string", null)]
        [NUnit.Framework.TestCaseAttribute("JsonObject", "foo", "\"bar\"", "{}", "string", null)]
        [NUnit.Framework.TestCaseAttribute("JsonAny", "foo", "\"bar\"", "{}", "string", null)]
        [NUnit.Framework.TestCaseAttribute("JsonNotAny", "foo", "\"bar\"", "{}", "string", null)]
        [NUnit.Framework.TestCaseAttribute("JsonObject", "foo", "\"bar\"", "<undefined>", "string", null)]
        [NUnit.Framework.TestCaseAttribute("JsonAny", "foo", "\"bar\"", "<undefined>", "string", null)]
        [NUnit.Framework.TestCaseAttribute("JsonNotAny", "foo", "\"bar\"", "<undefined>", "string", null)]
        [NUnit.Framework.TestCaseAttribute("JsonObject", "foo", "\"bar\"", "{\"foo\": \"baz\"}", "ReadOnlySpan<char>", null)]
        [NUnit.Framework.TestCaseAttribute("JsonAny", "foo", "\"bar\"", "{\"foo\": \"baz\"}", "ReadOnlySpan<char>", null)]
        [NUnit.Framework.TestCaseAttribute("JsonNotAny", "foo", "\"bar\"", "{\"foo\": \"baz\"}", "ReadOnlySpan<char>", null)]
        [NUnit.Framework.TestCaseAttribute("JsonObject", "foo", "\"bar\"", "{}", "ReadOnlySpan<char>", null)]
        [NUnit.Framework.TestCaseAttribute("JsonAny", "foo", "\"bar\"", "{}", "ReadOnlySpan<char>", null)]
        [NUnit.Framework.TestCaseAttribute("JsonNotAny", "foo", "\"bar\"", "{}", "ReadOnlySpan<char>", null)]
        [NUnit.Framework.TestCaseAttribute("JsonObject", "foo", "\"bar\"", "<undefined>", "ReadOnlySpan<char>", null)]
        [NUnit.Framework.TestCaseAttribute("JsonAny", "foo", "\"bar\"", "<undefined>", "ReadOnlySpan<char>", null)]
        [NUnit.Framework.TestCaseAttribute("JsonNotAny", "foo", "\"bar\"", "<undefined>", "ReadOnlySpan<char>", null)]
        [NUnit.Framework.TestCaseAttribute("JsonObject", "foo", "\"bar\"", "{\"foo\": \"baz\"}", "ReadOnlySpan<byte>", null)]
        [NUnit.Framework.TestCaseAttribute("JsonAny", "foo", "\"bar\"", "{\"foo\": \"baz\"}", "ReadOnlySpan<byte>", null)]
        [NUnit.Framework.TestCaseAttribute("JsonNotAny", "foo", "\"bar\"", "{\"foo\": \"baz\"}", "ReadOnlySpan<byte>", null)]
        [NUnit.Framework.TestCaseAttribute("JsonObject", "foo", "\"bar\"", "{}", "ReadOnlySpan<byte>", null)]
        [NUnit.Framework.TestCaseAttribute("JsonAny", "foo", "\"bar\"", "{}", "ReadOnlySpan<byte>", null)]
        [NUnit.Framework.TestCaseAttribute("JsonNotAny", "foo", "\"bar\"", "{}", "ReadOnlySpan<byte>", null)]
        [NUnit.Framework.TestCaseAttribute("JsonObject", "foo", "\"bar\"", "<undefined>", "ReadOnlySpan<byte>", null)]
        [NUnit.Framework.TestCaseAttribute("JsonAny", "foo", "\"bar\"", "<undefined>", "ReadOnlySpan<byte>", null)]
        [NUnit.Framework.TestCaseAttribute("JsonNotAny", "foo", "\"bar\"", "<undefined>", "ReadOnlySpan<byte>", null)]
        public virtual void SetPropertiesToJsonElementBackedJsonProperty(string jsonValueType, string propertyName, string propertyValue, string value, string propertyNameType, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValueType", jsonValueType);
            argumentsOfScenario.Add("propertyName", propertyName);
            argumentsOfScenario.Add("propertyValue", propertyValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("propertyNameType", propertyNameType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Set properties to JsonElement backed JsonProperty", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 39
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 40
 testRunner.Given(string.Format("the JsonElement backed {0} {1}", jsonValueType, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 41
 testRunner.When(string.Format("I set the property {0} to the value {1} on the {2} using a {3}", propertyName, propertyValue, jsonValueType, propertyNameType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 42
 testRunner.Then(string.Format("the property {0} should be {1} using {2}", propertyName, propertyValue, propertyNameType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Remove properties from a dotnet backed JsonProperty")]
        [NUnit.Framework.TestCaseAttribute("JsonObject", "foo", "{\"foo\": \"bar\"}", "string", null)]
        [NUnit.Framework.TestCaseAttribute("JsonAny", "foo", "{\"foo\": \"bar\"}", "string", null)]
        [NUnit.Framework.TestCaseAttribute("JsonNotAny", "foo", "{\"foo\": \"bar\"}", "string", null)]
        [NUnit.Framework.TestCaseAttribute("JsonObject", "foo", "{\"foo\": \"bar\"}", "ReadOnlySpan<char>", null)]
        [NUnit.Framework.TestCaseAttribute("JsonAny", "foo", "{\"foo\": \"bar\"}", "ReadOnlySpan<char>", null)]
        [NUnit.Framework.TestCaseAttribute("JsonNotAny", "foo", "{\"foo\": \"bar\"}", "ReadOnlySpan<char>", null)]
        [NUnit.Framework.TestCaseAttribute("JsonObject", "foo", "{\"foo\": \"bar\"}", "ReadOnlySpan<byte>", null)]
        [NUnit.Framework.TestCaseAttribute("JsonAny", "foo", "{\"foo\": \"bar\"}", "ReadOnlySpan<byte>", null)]
        [NUnit.Framework.TestCaseAttribute("JsonNotAny", "foo", "{\"foo\": \"bar\"}", "ReadOnlySpan<byte>", null)]
        [NUnit.Framework.TestCaseAttribute("JsonObject", "foo", "<undefined>", "string", null)]
        [NUnit.Framework.TestCaseAttribute("JsonAny", "foo", "<undefined>", "string", null)]
        [NUnit.Framework.TestCaseAttribute("JsonNotAny", "foo", "<undefined>", "string", null)]
        [NUnit.Framework.TestCaseAttribute("JsonObject", "foo", "<undefined>", "ReadOnlySpan<char>", null)]
        [NUnit.Framework.TestCaseAttribute("JsonAny", "foo", "<undefined>", "ReadOnlySpan<char>", null)]
        [NUnit.Framework.TestCaseAttribute("JsonNotAny", "foo", "<undefined>", "ReadOnlySpan<char>", null)]
        [NUnit.Framework.TestCaseAttribute("JsonObject", "foo", "<undefined>", "ReadOnlySpan<byte>", null)]
        [NUnit.Framework.TestCaseAttribute("JsonAny", "foo", "<undefined>", "ReadOnlySpan<byte>", null)]
        [NUnit.Framework.TestCaseAttribute("JsonNotAny", "foo", "<undefined>", "ReadOnlySpan<byte>", null)]
        [NUnit.Framework.TestCaseAttribute("JsonObject", "foo", "1.2", "string", null)]
        [NUnit.Framework.TestCaseAttribute("JsonAny", "foo", "1.2", "string", null)]
        [NUnit.Framework.TestCaseAttribute("JsonNotAny", "foo", "1.2", "string", null)]
        [NUnit.Framework.TestCaseAttribute("JsonObject", "foo", "1.2", "ReadOnlySpan<char>", null)]
        [NUnit.Framework.TestCaseAttribute("JsonAny", "foo", "1.2", "ReadOnlySpan<char>", null)]
        [NUnit.Framework.TestCaseAttribute("JsonNotAny", "foo", "1.2", "ReadOnlySpan<char>", null)]
        [NUnit.Framework.TestCaseAttribute("JsonObject", "foo", "1.2", "ReadOnlySpan<byte>", null)]
        [NUnit.Framework.TestCaseAttribute("JsonAny", "foo", "1.2", "ReadOnlySpan<byte>", null)]
        [NUnit.Framework.TestCaseAttribute("JsonNotAny", "foo", "1.2", "ReadOnlySpan<byte>", null)]
        public virtual void RemovePropertiesFromADotnetBackedJsonProperty(string jsonValueType, string propertyName, string value, string propertyNameType, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValueType", jsonValueType);
            argumentsOfScenario.Add("propertyName", propertyName);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("propertyNameType", propertyNameType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Remove properties from a dotnet backed JsonProperty", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 74
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 75
 testRunner.Given(string.Format("the dotnet backed {0}  {1}", jsonValueType, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 76
 testRunner.When(string.Format("I remove the property {0} from the {1} using a {2}", propertyName, jsonValueType, propertyNameType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 77
 testRunner.Then(string.Format("the property {0} should not be defined using {1}", propertyName, propertyNameType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Set properties to dotnet backed JsonProperty")]
        [NUnit.Framework.TestCaseAttribute("JsonObject", "foo", "\"bar\"", "{\"foo\": \"baz\"}", "string", null)]
        [NUnit.Framework.TestCaseAttribute("JsonAny", "foo", "\"bar\"", "{\"foo\": \"baz\"}", "string", null)]
        [NUnit.Framework.TestCaseAttribute("JsonNotAny", "foo", "\"bar\"", "{\"foo\": \"baz\"}", "string", null)]
        [NUnit.Framework.TestCaseAttribute("JsonObject", "foo", "\"bar\"", "{}", "string", null)]
        [NUnit.Framework.TestCaseAttribute("JsonAny", "foo", "\"bar\"", "{}", "string", null)]
        [NUnit.Framework.TestCaseAttribute("JsonNotAny", "foo", "\"bar\"", "{}", "string", null)]
        [NUnit.Framework.TestCaseAttribute("JsonObject", "foo", "\"bar\"", "<undefined>", "string", null)]
        [NUnit.Framework.TestCaseAttribute("JsonAny", "foo", "\"bar\"", "<undefined>", "string", null)]
        [NUnit.Framework.TestCaseAttribute("JsonNotAny", "foo", "\"bar\"", "<undefined>", "string", null)]
        [NUnit.Framework.TestCaseAttribute("JsonObject", "foo", "\"bar\"", "{\"foo\": \"baz\"}", "ReadOnlySpan<char>", null)]
        [NUnit.Framework.TestCaseAttribute("JsonAny", "foo", "\"bar\"", "{\"foo\": \"baz\"}", "ReadOnlySpan<char>", null)]
        [NUnit.Framework.TestCaseAttribute("JsonNotAny", "foo", "\"bar\"", "{\"foo\": \"baz\"}", "ReadOnlySpan<char>", null)]
        [NUnit.Framework.TestCaseAttribute("JsonObject", "foo", "\"bar\"", "{}", "ReadOnlySpan<char>", null)]
        [NUnit.Framework.TestCaseAttribute("JsonAny", "foo", "\"bar\"", "{}", "ReadOnlySpan<char>", null)]
        [NUnit.Framework.TestCaseAttribute("JsonNotAny", "foo", "\"bar\"", "{}", "ReadOnlySpan<char>", null)]
        [NUnit.Framework.TestCaseAttribute("JsonObject", "foo", "\"bar\"", "<undefined>", "ReadOnlySpan<char>", null)]
        [NUnit.Framework.TestCaseAttribute("JsonAny", "foo", "\"bar\"", "<undefined>", "ReadOnlySpan<char>", null)]
        [NUnit.Framework.TestCaseAttribute("JsonNotAny", "foo", "\"bar\"", "<undefined>", "ReadOnlySpan<char>", null)]
        [NUnit.Framework.TestCaseAttribute("JsonObject", "foo", "\"bar\"", "{\"foo\": \"baz\"}", "ReadOnlySpan<byte>", null)]
        [NUnit.Framework.TestCaseAttribute("JsonAny", "foo", "\"bar\"", "{\"foo\": \"baz\"}", "ReadOnlySpan<byte>", null)]
        [NUnit.Framework.TestCaseAttribute("JsonNotAny", "foo", "\"bar\"", "{\"foo\": \"baz\"}", "ReadOnlySpan<byte>", null)]
        [NUnit.Framework.TestCaseAttribute("JsonObject", "foo", "\"bar\"", "{}", "ReadOnlySpan<byte>", null)]
        [NUnit.Framework.TestCaseAttribute("JsonAny", "foo", "\"bar\"", "{}", "ReadOnlySpan<byte>", null)]
        [NUnit.Framework.TestCaseAttribute("JsonNotAny", "foo", "\"bar\"", "{}", "ReadOnlySpan<byte>", null)]
        [NUnit.Framework.TestCaseAttribute("JsonObject", "foo", "\"bar\"", "<undefined>", "ReadOnlySpan<byte>", null)]
        [NUnit.Framework.TestCaseAttribute("JsonAny", "foo", "\"bar\"", "<undefined>", "ReadOnlySpan<byte>", null)]
        [NUnit.Framework.TestCaseAttribute("JsonNotAny", "foo", "\"bar\"", "<undefined>", "ReadOnlySpan<byte>", null)]
        public virtual void SetPropertiesToDotnetBackedJsonProperty(string jsonValueType, string propertyName, string propertyValue, string value, string propertyNameType, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValueType", jsonValueType);
            argumentsOfScenario.Add("propertyName", propertyName);
            argumentsOfScenario.Add("propertyValue", propertyValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("propertyNameType", propertyNameType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Set properties to dotnet backed JsonProperty", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 109
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 110
 testRunner.Given(string.Format("the dotnet backed {0} {1}", jsonValueType, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 111
 testRunner.When(string.Format("I set the property {0} to the value {1} on the {2} using a {3}", propertyName, propertyValue, jsonValueType, propertyNameType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 112
 testRunner.Then(string.Format("the property {0} should be {1} using {2}", propertyName, propertyValue, propertyNameType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get existing properties for a JsonElement backed JsonProperty")]
        [NUnit.Framework.TestCaseAttribute("JsonObject", "foo", "\"bar\"", "{\"foo\": \"bar\"}", "string", "be found", null)]
        [NUnit.Framework.TestCaseAttribute("JsonAny", "foo", "\"bar\"", "{\"foo\": \"bar\"}", "string", "be found", null)]
        [NUnit.Framework.TestCaseAttribute("JsonNotAny", "foo", "\"bar\"", "{\"foo\": \"bar\"}", "string", "be found", null)]
        [NUnit.Framework.TestCaseAttribute("JsonObject", "foo", "\"bar\"", "{\"foo\": \"bar\"}", "ReadOnlySpan<char>", "be found", null)]
        [NUnit.Framework.TestCaseAttribute("JsonAny", "foo", "\"bar\"", "{\"foo\": \"bar\"}", "ReadOnlySpan<char>", "be found", null)]
        [NUnit.Framework.TestCaseAttribute("JsonNotAny", "foo", "\"bar\"", "{\"foo\": \"bar\"}", "ReadOnlySpan<char>", "be found", null)]
        [NUnit.Framework.TestCaseAttribute("JsonObject", "foo", "\"bar\"", "{\"foo\": \"bar\"}", "ReadOnlySpan<byte>", "be found", null)]
        [NUnit.Framework.TestCaseAttribute("JsonAny", "foo", "\"bar\"", "{\"foo\": \"bar\"}", "ReadOnlySpan<byte>", "be found", null)]
        [NUnit.Framework.TestCaseAttribute("JsonNotAny", "foo", "\"bar\"", "{\"foo\": \"bar\"}", "ReadOnlySpan<byte>", "be found", null)]
        [NUnit.Framework.TestCaseAttribute("JsonObject", "foo", "undefined", "{}", "string", "not be found", null)]
        [NUnit.Framework.TestCaseAttribute("JsonAny", "foo", "undefined", "{}", "string", "not be found", null)]
        [NUnit.Framework.TestCaseAttribute("JsonNotAny", "foo", "undefined", "{}", "string", "not be found", null)]
        [NUnit.Framework.TestCaseAttribute("JsonObject", "foo", "undefined", "{}", "ReadOnlySpan<char>", "not be found", null)]
        [NUnit.Framework.TestCaseAttribute("JsonAny", "foo", "undefined", "{}", "ReadOnlySpan<char>", "not be found", null)]
        [NUnit.Framework.TestCaseAttribute("JsonNotAny", "foo", "undefined", "{}", "ReadOnlySpan<char>", "not be found", null)]
        [NUnit.Framework.TestCaseAttribute("JsonObject", "foo", "undefined", "{}", "ReadOnlySpan<byte>", "not be found", null)]
        [NUnit.Framework.TestCaseAttribute("JsonAny", "foo", "undefined", "{}", "ReadOnlySpan<byte>", "not be found", null)]
        [NUnit.Framework.TestCaseAttribute("JsonNotAny", "foo", "undefined", "{}", "ReadOnlySpan<byte>", "not be found", null)]
        public virtual void GetExistingPropertiesForAJsonElementBackedJsonProperty(string jsonValueType, string propertyName, string propertyValue, string value, string propertyNameType, string propertyFound, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValueType", jsonValueType);
            argumentsOfScenario.Add("propertyName", propertyName);
            argumentsOfScenario.Add("propertyValue", propertyValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("propertyNameType", propertyNameType);
            argumentsOfScenario.Add("propertyFound", propertyFound);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get existing properties for a JsonElement backed JsonProperty", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 144
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 145
 testRunner.Given(string.Format("the JsonElement backed {0} {1}", jsonValueType, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 146
 testRunner.When(string.Format("I try to get the property {0} using {1}", propertyName, propertyNameType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 147
 testRunner.Then(string.Format("the property should {0}", propertyFound), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 148
 testRunner.And(string.Format("the property value should be {0}", propertyValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get existing properties for a dotnet backed JsonProperty")]
        [NUnit.Framework.TestCaseAttribute("JsonObject", "foo", "\"bar\"", "{\"foo\": \"bar\"}", "string", "be found", null)]
        [NUnit.Framework.TestCaseAttribute("JsonAny", "foo", "\"bar\"", "{\"foo\": \"bar\"}", "string", "be found", null)]
        [NUnit.Framework.TestCaseAttribute("JsonNotAny", "foo", "\"bar\"", "{\"foo\": \"bar\"}", "string", "be found", null)]
        [NUnit.Framework.TestCaseAttribute("JsonObject", "foo", "\"bar\"", "{\"foo\": \"bar\"}", "ReadOnlySpan<char>", "be found", null)]
        [NUnit.Framework.TestCaseAttribute("JsonAny", "foo", "\"bar\"", "{\"foo\": \"bar\"}", "ReadOnlySpan<char>", "be found", null)]
        [NUnit.Framework.TestCaseAttribute("JsonNotAny", "foo", "\"bar\"", "{\"foo\": \"bar\"}", "ReadOnlySpan<char>", "be found", null)]
        [NUnit.Framework.TestCaseAttribute("JsonObject", "foo", "\"bar\"", "{\"foo\": \"bar\"}", "ReadOnlySpan<byte>", "be found", null)]
        [NUnit.Framework.TestCaseAttribute("JsonAny", "foo", "\"bar\"", "{\"foo\": \"bar\"}", "ReadOnlySpan<byte>", "be found", null)]
        [NUnit.Framework.TestCaseAttribute("JsonNotAny", "foo", "\"bar\"", "{\"foo\": \"bar\"}", "ReadOnlySpan<byte>", "be found", null)]
        [NUnit.Framework.TestCaseAttribute("JsonObject", "foo", "undefined", "{}", "string", "not be found", null)]
        [NUnit.Framework.TestCaseAttribute("JsonAny", "foo", "undefined", "{}", "string", "not be found", null)]
        [NUnit.Framework.TestCaseAttribute("JsonNotAny", "foo", "undefined", "{}", "string", "not be found", null)]
        [NUnit.Framework.TestCaseAttribute("JsonObject", "foo", "undefined", "{}", "ReadOnlySpan<char>", "not be found", null)]
        [NUnit.Framework.TestCaseAttribute("JsonAny", "foo", "undefined", "{}", "ReadOnlySpan<char>", "not be found", null)]
        [NUnit.Framework.TestCaseAttribute("JsonNotAny", "foo", "undefined", "{}", "ReadOnlySpan<char>", "not be found", null)]
        [NUnit.Framework.TestCaseAttribute("JsonObject", "foo", "undefined", "{}", "ReadOnlySpan<byte>", "not be found", null)]
        [NUnit.Framework.TestCaseAttribute("JsonAny", "foo", "undefined", "{}", "ReadOnlySpan<byte>", "not be found", null)]
        [NUnit.Framework.TestCaseAttribute("JsonNotAny", "foo", "undefined", "{}", "ReadOnlySpan<byte>", "not be found", null)]
        public virtual void GetExistingPropertiesForADotnetBackedJsonProperty(string jsonValueType, string propertyName, string propertyValue, string value, string propertyNameType, string propertyFound, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jsonValueType", jsonValueType);
            argumentsOfScenario.Add("propertyName", propertyName);
            argumentsOfScenario.Add("propertyValue", propertyValue);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("propertyNameType", propertyNameType);
            argumentsOfScenario.Add("propertyFound", propertyFound);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get existing properties for a dotnet backed JsonProperty", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 171
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 172
 testRunner.Given(string.Format("the dotnet backed {0} {1}", jsonValueType, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 173
 testRunner.When(string.Format("I try to get the property {0} using {1}", propertyName, propertyNameType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 174
 testRunner.Then(string.Format("the property should {0}", propertyFound), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 175
 testRunner.And(string.Format("the property value should be {0}", propertyValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
