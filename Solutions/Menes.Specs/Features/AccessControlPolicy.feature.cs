// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Menes.Specs.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("AccessControlPolicy")]
    public partial class AccessControlPolicyFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "AccessControlPolicy.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "AccessControlPolicy", "\tIn order to secure an OpenApi service\r\n\tAs a developer\r\n\tI want to be able to co" +
                    "nfigure access control policies", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The request details are passed to all policies")]
        [NUnit.Framework.TestCaseAttribute("/test/1", "op1", "GET", null)]
        [NUnit.Framework.TestCaseAttribute("/test/2", "op2", "GET", null)]
        [NUnit.Framework.TestCaseAttribute("/test/1", "op1", "PUT", null)]
        [NUnit.Framework.TestCaseAttribute("/test/2", "op2", "POST", null)]
        public virtual void TheRequestDetailsArePassedToAllPolicies(string path, string operationId, string httpMethod, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The request details are passed to all policies", null, exampleTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
    testRunner.Given("I have configured 3 access control policies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 8
    testRunner.When(string.Format("I check access for a \'{0}\' request for \'{1}\' with an operationId of \'{2}\'", httpMethod, path, operationId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 9
    testRunner.Then(string.Format("each policy should receive a path of \'{0}\'", path), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 10
    testRunner.And(string.Format("each policy should receive an operationId of \'{0}\'", operationId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 11
    testRunner.And(string.Format("each policy should receive an HttpMethod of \'{0}\'", httpMethod), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The one and only access control policy blocks the request")]
        public virtual void TheOneAndOnlyAccessControlPolicyBlocksTheRequest()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The one and only access control policy blocks the request", null, ((string[])(null)));
#line 20
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 21
 testRunner.Given("I have configured 1 access control policy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 22
    testRunner.When("I check access for a \'GET\' request for \'/test/1\' with an operationId of \'op1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 23
    testRunner.And("policy 0 blocks access without explanation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 24
    testRunner.Then("the result should block the operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 25
    testRunner.And("the result should have no explanation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The one and only access control policy blocks the request with an explanation")]
        public virtual void TheOneAndOnlyAccessControlPolicyBlocksTheRequestWithAnExplanation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The one and only access control policy blocks the request with an explanation", null, ((string[])(null)));
#line 27
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 28
 testRunner.Given("I have configured 1 access control policy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 29
    testRunner.When("I check access for a \'GET\' request for \'/test/1\' with an operationId of \'op1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 30
    testRunner.And("policy 0 blocks access with explanation \'you need to be in the in-crowd group\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 31
 testRunner.Then("the result should block the operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 32
    testRunner.And("the result should have the explanation \'you need to be in the in-crowd group\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The one and only access control policy allows the request")]
        public virtual void TheOneAndOnlyAccessControlPolicyAllowsTheRequest()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The one and only access control policy allows the request", null, ((string[])(null)));
#line 34
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 35
 testRunner.Given("I have configured 1 access control policy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 36
    testRunner.When("I check access for a \'GET\' request for \'/test/1\' with an operationId of \'op1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 37
    testRunner.And("policy 0 allows access", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 38
    testRunner.Then("the result should allow the operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 39
    testRunner.And("the result should have no explanation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The first of two access control policies blocks the request")]
        public virtual void TheFirstOfTwoAccessControlPoliciesBlocksTheRequest()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The first of two access control policies blocks the request", null, ((string[])(null)));
#line 41
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 42
    testRunner.Given("I have configured 2 access control policies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 43
    testRunner.When("I check access for a \'GET\' request for \'/test/1\' with an operationId of \'op1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 44
    testRunner.And("policy 0 blocks access without explanation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 45
    testRunner.And("policy 1 allows access", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 46
    testRunner.Then("the result should block the operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 47
    testRunner.And("the result should have no explanation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The first of two access control policies blocks the request with an explanation")]
        public virtual void TheFirstOfTwoAccessControlPoliciesBlocksTheRequestWithAnExplanation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The first of two access control policies blocks the request with an explanation", null, ((string[])(null)));
#line 49
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 50
    testRunner.Given("I have configured 2 access control policies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 51
    testRunner.When("I check access for a \'GET\' request for \'/test/1\' with an operationId of \'op1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 52
    testRunner.And("policy 0 blocks access with explanation \'you looked at me funny\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 53
    testRunner.And("policy 1 allows access", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 54
 testRunner.Then("the result should block the operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 55
    testRunner.And("the result should have the explanation \'you looked at me funny\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The second of two access control policies blocks the request")]
        public virtual void TheSecondOfTwoAccessControlPoliciesBlocksTheRequest()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The second of two access control policies blocks the request", null, ((string[])(null)));
#line 57
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 58
    testRunner.Given("I have configured 2 access control policies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 59
    testRunner.When("I check access for a \'GET\' request for \'/test/1\' with an operationId of \'op1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 60
    testRunner.And("policy 0 allows access", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 61
    testRunner.And("policy 1 blocks access without explanation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 62
    testRunner.Then("the result should block the operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 63
    testRunner.And("the result should have no explanation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The second of two access control policies blocks the request with an explanation")]
        public virtual void TheSecondOfTwoAccessControlPoliciesBlocksTheRequestWithAnExplanation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The second of two access control policies blocks the request with an explanation", null, ((string[])(null)));
#line 65
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 66
    testRunner.Given("I have configured 2 access control policies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 67
    testRunner.When("I check access for a \'GET\' request for \'/test/1\' with an operationId of \'op1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 68
    testRunner.And("policy 0 allows access", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 69
    testRunner.And("policy 1 blocks access with explanation \'not on my watch\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 70
 testRunner.Then("the result should block the operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 71
    testRunner.And("the result should have the explanation \'not on my watch\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Both access control policies block the request")]
        public virtual void BothAccessControlPoliciesBlockTheRequest()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Both access control policies block the request", null, ((string[])(null)));
#line 73
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 74
    testRunner.Given("I have configured 2 access control policies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 75
    testRunner.When("I check access for a \'GET\' request for \'/test/1\' with an operationId of \'op1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 76
    testRunner.And("policy 0 blocks access without explanation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 77
    testRunner.And("policy 1 blocks access without explanation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 78
    testRunner.Then("the result should block the operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 79
    testRunner.And("the result should have no explanation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Both access control policies block the request and the first provides an explanat" +
            "ion")]
        public virtual void BothAccessControlPoliciesBlockTheRequestAndTheFirstProvidesAnExplanation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Both access control policies block the request and the first provides an explanat" +
                    "ion", null, ((string[])(null)));
#line 81
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 82
    testRunner.Given("I have configured 2 access control policies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 83
    testRunner.When("I check access for a \'GET\' request for \'/test/1\' with an operationId of \'op1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 84
    testRunner.And("policy 0 blocks access with explanation \'token has incorrect polarity\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 85
    testRunner.And("policy 1 blocks access without explanation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 86
 testRunner.Then("the result should block the operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 87
    testRunner.And("the result should have the explanation \'token has incorrect polarity\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Both access control policies block the request and the second provides an explana" +
            "tion")]
        public virtual void BothAccessControlPoliciesBlockTheRequestAndTheSecondProvidesAnExplanation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Both access control policies block the request and the second provides an explana" +
                    "tion", null, ((string[])(null)));
#line 89
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 90
    testRunner.Given("I have configured 2 access control policies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 91
    testRunner.When("I check access for a \'GET\' request for \'/test/1\' with an operationId of \'op1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 92
    testRunner.And("policy 0 blocks access without explanation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 93
    testRunner.And("policy 1 blocks access with explanation \'computer says no\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 94
 testRunner.Then("the result should block the operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 95
    testRunner.And("the result should have the explanation \'computer says no\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Both access control policies block the request and both provide an explanation")]
        public virtual void BothAccessControlPoliciesBlockTheRequestAndBothProvideAnExplanation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Both access control policies block the request and both provide an explanation", null, ((string[])(null)));
#line 97
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 98
    testRunner.Given("I have configured 2 access control policies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 99
    testRunner.When("I check access for a \'GET\' request for \'/test/1\' with an operationId of \'op1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 100
    testRunner.And("policy 0 blocks access with explanation \'token has incorrect polarity\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 101
    testRunner.And("policy 1 blocks access with explanation \'computer says no\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 102
 testRunner.Then("the result should block the operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 103
    testRunner.And("the result should have the explanation \'token has incorrect polarity; computer sa" +
                    "ys no\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Both access control policies allow the request")]
        public virtual void BothAccessControlPoliciesAllowTheRequest()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Both access control policies allow the request", null, ((string[])(null)));
#line 105
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 106
    testRunner.Given("I have configured 2 access control policies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 107
    testRunner.When("I check access for a \'GET\' request for \'/test/1\' with an operationId of \'op1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 108
    testRunner.And("policy 0 allows access", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 109
    testRunner.And("policy 1 allows access", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 110
    testRunner.Then("the result should allow the operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 111
    testRunner.And("the result should have no explanation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
