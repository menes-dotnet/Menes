// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.7.0.0
//      SpecFlow Generator Version:3.7.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Features.JsonSchema.Draft2020212
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.7.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("dynamicRef draft2020-12")]
    [NUnit.Framework.CategoryAttribute("draft2020-12")]
    public partial class DynamicRefDraft2020_12Feature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = new string[] {
                "draft2020-12"};
        
#line 1 "dynamicRef.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/JsonSchema/Draft2020212", "dynamicRef draft2020-12", "    In order to use json-schema\r\n    As a developer\r\n    I want to support dynami" +
                    "cRef in draft2020-12", ProgrammingLanguage.CSharp, new string[] {
                        "draft2020-12"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A $dynamicRef to a $dynamicAnchor in the same schema resource should behave like " +
            "a normal $ref to an $anchor")]
        [NUnit.Framework.TestCaseAttribute("#/000/tests/000/data", "true", "An array of strings is valid", null)]
        [NUnit.Framework.TestCaseAttribute("#/000/tests/001/data", "false", "An array containing non-strings is invalid", null)]
        public virtual void ADynamicRefToADynamicAnchorInTheSameSchemaResourceShouldBehaveLikeANormalRefToAnAnchor(string inputDataReference, string valid, string description, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("inputDataReference", inputDataReference);
            argumentsOfScenario.Add("valid", valid);
            argumentsOfScenario.Add("description", description);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A $dynamicRef to a $dynamicAnchor in the same schema resource should behave like " +
                    "a normal $ref to an $anchor", @"/* Schema: 
{
            ""type"": ""array"",
            ""items"": { ""$dynamicRef"": ""#items"" },
            ""$defs"": {
                ""foo"": {
                    ""$dynamicAnchor"": ""items"",
                    ""type"": ""string""
                }
            }
        }
*/", tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 8
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 21
    testRunner.Given("the input JSON file \"dynamicRef.json\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 22
    testRunner.And("the schema at \"#/0/schema\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 23
    testRunner.And(string.Format("the input data at \"{0}\"", inputDataReference), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 24
    testRunner.And("I generate a type for the schema", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 25
    testRunner.And("I construct an instance of the schema type from the data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 26
    testRunner.When("I validate the instance", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 27
    testRunner.Then(string.Format("the result will be {0}", valid), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A $dynamicRef to an $anchor in the same schema resource should behave like a norm" +
            "al $ref to an $anchor")]
        [NUnit.Framework.TestCaseAttribute("#/001/tests/000/data", "true", "An array of strings is valid", null)]
        [NUnit.Framework.TestCaseAttribute("#/001/tests/001/data", "false", "An array containing non-strings is invalid", null)]
        public virtual void ADynamicRefToAnAnchorInTheSameSchemaResourceShouldBehaveLikeANormalRefToAnAnchor(string inputDataReference, string valid, string description, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("inputDataReference", inputDataReference);
            argumentsOfScenario.Add("valid", valid);
            argumentsOfScenario.Add("description", description);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A $dynamicRef to an $anchor in the same schema resource should behave like a norm" +
                    "al $ref to an $anchor", @"/* Schema: 
{
            ""type"": ""array"",
            ""items"": { ""$dynamicRef"": ""#items"" },
            ""$defs"": {
                ""foo"": {
                    ""$anchor"": ""items"",
                    ""type"": ""string""
                }
            }
        }
*/", tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 34
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 47
    testRunner.Given("the input JSON file \"dynamicRef.json\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 48
    testRunner.And("the schema at \"#/1/schema\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 49
    testRunner.And(string.Format("the input data at \"{0}\"", inputDataReference), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 50
    testRunner.And("I generate a type for the schema", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 51
    testRunner.And("I construct an instance of the schema type from the data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 52
    testRunner.When("I validate the instance", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 53
    testRunner.Then(string.Format("the result will be {0}", valid), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A $ref to a $dynamicAnchor in the same schema resource should behave like a norma" +
            "l $ref to an $anchor")]
        [NUnit.Framework.TestCaseAttribute("#/002/tests/000/data", "true", "An array of strings is valid", null)]
        [NUnit.Framework.TestCaseAttribute("#/002/tests/001/data", "false", "An array containing non-strings is invalid", null)]
        public virtual void ARefToADynamicAnchorInTheSameSchemaResourceShouldBehaveLikeANormalRefToAnAnchor(string inputDataReference, string valid, string description, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("inputDataReference", inputDataReference);
            argumentsOfScenario.Add("valid", valid);
            argumentsOfScenario.Add("description", description);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A $ref to a $dynamicAnchor in the same schema resource should behave like a norma" +
                    "l $ref to an $anchor", @"/* Schema: 
{
            ""type"": ""array"",
            ""items"": { ""$ref"": ""#items"" },
            ""$defs"": {
                ""foo"": {
                    ""$dynamicAnchor"": ""items"",
                    ""type"": ""string""
                }
            }
        }
*/", tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 60
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 73
    testRunner.Given("the input JSON file \"dynamicRef.json\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 74
    testRunner.And("the schema at \"#/2/schema\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 75
    testRunner.And(string.Format("the input data at \"{0}\"", inputDataReference), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 76
    testRunner.And("I generate a type for the schema", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 77
    testRunner.And("I construct an instance of the schema type from the data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 78
    testRunner.When("I validate the instance", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 79
    testRunner.Then(string.Format("the result will be {0}", valid), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A $dynamicRef should resolve to the first $dynamicAnchor that is encountered when" +
            " the schema is evaluated")]
        [NUnit.Framework.TestCaseAttribute("#/003/tests/000/data", "true", "An array of strings is valid", null)]
        [NUnit.Framework.TestCaseAttribute("#/003/tests/001/data", "false", "An array containing non-strings is invalid", null)]
        public virtual void ADynamicRefShouldResolveToTheFirstDynamicAnchorThatIsEncounteredWhenTheSchemaIsEvaluated(string inputDataReference, string valid, string description, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("inputDataReference", inputDataReference);
            argumentsOfScenario.Add("valid", valid);
            argumentsOfScenario.Add("description", description);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A $dynamicRef should resolve to the first $dynamicAnchor that is encountered when" +
                    " the schema is evaluated", @"/* Schema: 
{
            ""$id"": ""https://test.json-schema.org/typical-dynamic-resolution/root"",
            ""$ref"": ""list"",
            ""$defs"": {
                ""foo"": {
                    ""$dynamicAnchor"": ""items"",
                    ""type"": ""string""
                },
                ""list"": {
                    ""$id"": ""list"",
                    ""type"": ""array"",
                    ""items"": { ""$dynamicRef"": ""#items"" },
                    ""$defs"": {
                      ""items"": {
                          ""$comment"": ""This is only needed to satisfy the bookending requirement"",
                          ""$dynamicAnchor"": ""items""
                      }
                    }
                }
            }
        }
*/", tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 86
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 110
    testRunner.Given("the input JSON file \"dynamicRef.json\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 111
    testRunner.And("the schema at \"#/3/schema\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 112
    testRunner.And(string.Format("the input data at \"{0}\"", inputDataReference), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 113
    testRunner.And("I generate a type for the schema", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 114
    testRunner.And("I construct an instance of the schema type from the data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 115
    testRunner.When("I validate the instance", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 116
    testRunner.Then(string.Format("the result will be {0}", valid), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A $dynamicRef with intermediate scopes that don\'t include a matching $dynamicAnch" +
            "or should not affect dynamic scope resolution")]
        [NUnit.Framework.TestCaseAttribute("#/004/tests/000/data", "true", "An array of strings is valid", null)]
        [NUnit.Framework.TestCaseAttribute("#/004/tests/001/data", "false", "An array containing non-strings is invalid", null)]
        public virtual void ADynamicRefWithIntermediateScopesThatDontIncludeAMatchingDynamicAnchorShouldNotAffectDynamicScopeResolution(string inputDataReference, string valid, string description, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("inputDataReference", inputDataReference);
            argumentsOfScenario.Add("valid", valid);
            argumentsOfScenario.Add("description", description);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A $dynamicRef with intermediate scopes that don\'t include a matching $dynamicAnch" +
                    "or should not affect dynamic scope resolution", @"/* Schema: 
{
            ""$id"": ""https://test.json-schema.org/dynamic-resolution-with-intermediate-scopes/root"",
            ""$ref"": ""intermediate-scope"",
            ""$defs"": {
                ""foo"": {
                    ""$dynamicAnchor"": ""items"",
                    ""type"": ""string""
                },
                ""intermediate-scope"": {
                    ""$id"": ""intermediate-scope"",
                    ""$ref"": ""list""
                },
                ""list"": {
                    ""$id"": ""list"",
                    ""type"": ""array"",
                    ""items"": { ""$dynamicRef"": ""#items"" },
                    ""$defs"": {
                      ""items"": {
                          ""$comment"": ""This is only needed to satisfy the bookending requirement"",
                          ""$dynamicAnchor"": ""items""
                      }
                    }
                }
            }
        }
*/", tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 123
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 151
    testRunner.Given("the input JSON file \"dynamicRef.json\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 152
    testRunner.And("the schema at \"#/4/schema\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 153
    testRunner.And(string.Format("the input data at \"{0}\"", inputDataReference), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 154
    testRunner.And("I generate a type for the schema", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 155
    testRunner.And("I construct an instance of the schema type from the data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 156
    testRunner.When("I validate the instance", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 157
    testRunner.Then(string.Format("the result will be {0}", valid), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("An $anchor with the same name as a $dynamicAnchor should not be used for dynamic " +
            "scope resolution")]
        [NUnit.Framework.TestCaseAttribute("#/005/tests/000/data", "true", "Any array is valid", null)]
        public virtual void AnAnchorWithTheSameNameAsADynamicAnchorShouldNotBeUsedForDynamicScopeResolution(string inputDataReference, string valid, string description, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("inputDataReference", inputDataReference);
            argumentsOfScenario.Add("valid", valid);
            argumentsOfScenario.Add("description", description);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("An $anchor with the same name as a $dynamicAnchor should not be used for dynamic " +
                    "scope resolution", @"/* Schema: 
{
            ""$id"": ""https://test.json-schema.org/dynamic-resolution-ignores-anchors/root"",
            ""$ref"": ""list"",
            ""$defs"": {
                ""foo"": {
                    ""$anchor"": ""items"",
                    ""type"": ""string""
                },
                ""list"": {
                    ""$id"": ""list"",
                    ""type"": ""array"",
                    ""items"": { ""$dynamicRef"": ""#items"" },
                    ""$defs"": {
                      ""items"": {
                          ""$comment"": ""This is only needed to satisfy the bookending requirement"",
                          ""$dynamicAnchor"": ""items""
                      }
                    }
                }
            }
        }
*/", tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 164
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 188
    testRunner.Given("the input JSON file \"dynamicRef.json\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 189
    testRunner.And("the schema at \"#/5/schema\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 190
    testRunner.And(string.Format("the input data at \"{0}\"", inputDataReference), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 191
    testRunner.And("I generate a type for the schema", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 192
    testRunner.And("I construct an instance of the schema type from the data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 193
    testRunner.When("I validate the instance", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 194
    testRunner.Then(string.Format("the result will be {0}", valid), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A $dynamicRef without a matching $dynamicAnchor in the same schema resource shoul" +
            "d behave like a normal $ref to $anchor")]
        [NUnit.Framework.TestCaseAttribute("#/006/tests/000/data", "true", "Any array is valid", null)]
        public virtual void ADynamicRefWithoutAMatchingDynamicAnchorInTheSameSchemaResourceShouldBehaveLikeANormalRefToAnchor(string inputDataReference, string valid, string description, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("inputDataReference", inputDataReference);
            argumentsOfScenario.Add("valid", valid);
            argumentsOfScenario.Add("description", description);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A $dynamicRef without a matching $dynamicAnchor in the same schema resource shoul" +
                    "d behave like a normal $ref to $anchor", @"/* Schema: 
{
            ""$id"": ""https://test.json-schema.org/dynamic-resolution-without-bookend/root"",
            ""$ref"": ""list"",
            ""$defs"": {
                ""foo"": {
                    ""$dynamicAnchor"": ""items"",
                    ""type"": ""string""
                },
                ""list"": {
                    ""$id"": ""list"",
                    ""type"": ""array"",
                    ""items"": { ""$dynamicRef"": ""#items"" },
                    ""$defs"": {
                        ""items"": {
                            ""$comment"": ""This is only needed to give the reference somewhere to resolve to when it behaves like $ref"",
                            ""$anchor"": ""items""
                        }
                    }
                }
            }
        }
*/", tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 200
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 224
    testRunner.Given("the input JSON file \"dynamicRef.json\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 225
    testRunner.And("the schema at \"#/6/schema\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 226
    testRunner.And(string.Format("the input data at \"{0}\"", inputDataReference), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 227
    testRunner.And("I generate a type for the schema", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 228
    testRunner.And("I construct an instance of the schema type from the data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 229
    testRunner.When("I validate the instance", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 230
    testRunner.Then(string.Format("the result will be {0}", valid), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A $dynamicRef with a non-matching $dynamicAnchor in the same schema resource shou" +
            "ld behave like a normal $ref to $anchor")]
        [NUnit.Framework.TestCaseAttribute("#/007/tests/000/data", "true", "Any array is valid", null)]
        public virtual void ADynamicRefWithANon_MatchingDynamicAnchorInTheSameSchemaResourceShouldBehaveLikeANormalRefToAnchor(string inputDataReference, string valid, string description, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("inputDataReference", inputDataReference);
            argumentsOfScenario.Add("valid", valid);
            argumentsOfScenario.Add("description", description);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A $dynamicRef with a non-matching $dynamicAnchor in the same schema resource shou" +
                    "ld behave like a normal $ref to $anchor", @"/* Schema: 
{
            ""$id"": ""https://test.json-schema.org/unmatched-dynamic-anchor/root"",
            ""$ref"": ""list"",
            ""$defs"": {
                ""foo"": {
                    ""$dynamicAnchor"": ""items"",
                    ""type"": ""string""
                },
                ""list"": {
                    ""$id"": ""list"",
                    ""type"": ""array"",
                    ""items"": { ""$dynamicRef"": ""#items"" },
                    ""$defs"": {
                        ""items"": {
                            ""$comment"": ""This is only needed to give the reference somewhere to resolve to when it behaves like $ref"",
                            ""$anchor"": ""items"",
                            ""$dynamicAnchor"": ""foo""
                        }
                    }
                }
            }
        }
*/", tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 236
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 261
    testRunner.Given("the input JSON file \"dynamicRef.json\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 262
    testRunner.And("the schema at \"#/7/schema\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 263
    testRunner.And(string.Format("the input data at \"{0}\"", inputDataReference), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 264
    testRunner.And("I generate a type for the schema", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 265
    testRunner.And("I construct an instance of the schema type from the data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 266
    testRunner.When("I validate the instance", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 267
    testRunner.Then(string.Format("the result will be {0}", valid), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A $dynamicRef that initially resolves to a schema with a matching $dynamicAnchor " +
            "should resolve to the first $dynamicAnchor in the dynamic scope")]
        [NUnit.Framework.TestCaseAttribute("#/008/tests/000/data", "true", "The recursive part is valid against the root", null)]
        [NUnit.Framework.TestCaseAttribute("#/008/tests/001/data", "false", "The recursive part is not valid against the root", null)]
        public virtual void ADynamicRefThatInitiallyResolvesToASchemaWithAMatchingDynamicAnchorShouldResolveToTheFirstDynamicAnchorInTheDynamicScope(string inputDataReference, string valid, string description, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("inputDataReference", inputDataReference);
            argumentsOfScenario.Add("valid", valid);
            argumentsOfScenario.Add("description", description);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A $dynamicRef that initially resolves to a schema with a matching $dynamicAnchor " +
                    "should resolve to the first $dynamicAnchor in the dynamic scope", @"/* Schema: 
{
            ""$id"": ""https://test.json-schema.org/relative-dynamic-reference/root"",
            ""$dynamicAnchor"": ""meta"",
            ""type"": ""object"",
            ""properties"": {
                ""foo"": { ""const"": ""pass"" }
            },
            ""$ref"": ""extended"",
            ""$defs"": {
                ""extended"": {
                    ""$id"": ""extended"",
                    ""$dynamicAnchor"": ""meta"",
                    ""type"": ""object"",
                    ""properties"": {
                        ""bar"": { ""$ref"": ""bar"" }
                    }
                },
                ""bar"": {
                    ""$id"": ""bar"",
                    ""type"": ""object"",
                    ""properties"": {
                        ""baz"": { ""$dynamicRef"": ""extended#meta"" }
                    }
                }
            }
        }
*/", tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 273
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 302
    testRunner.Given("the input JSON file \"dynamicRef.json\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 303
    testRunner.And("the schema at \"#/8/schema\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 304
    testRunner.And(string.Format("the input data at \"{0}\"", inputDataReference), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 305
    testRunner.And("I generate a type for the schema", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 306
    testRunner.And("I construct an instance of the schema type from the data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 307
    testRunner.When("I validate the instance", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 308
    testRunner.Then(string.Format("the result will be {0}", valid), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A $dynamicRef that initially resolves to a schema without a matching $dynamicAnch" +
            "or should behave like a normal $ref to $anchor")]
        [NUnit.Framework.TestCaseAttribute("#/009/tests/000/data", "true", "The recursive part doesn\'t need to validate against the root", null)]
        public virtual void ADynamicRefThatInitiallyResolvesToASchemaWithoutAMatchingDynamicAnchorShouldBehaveLikeANormalRefToAnchor(string inputDataReference, string valid, string description, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("inputDataReference", inputDataReference);
            argumentsOfScenario.Add("valid", valid);
            argumentsOfScenario.Add("description", description);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A $dynamicRef that initially resolves to a schema without a matching $dynamicAnch" +
                    "or should behave like a normal $ref to $anchor", @"/* Schema: 
{
            ""$id"": ""https://test.json-schema.org/relative-dynamic-reference-without-bookend/root"",
            ""$dynamicAnchor"": ""meta"",
            ""type"": ""object"",
            ""properties"": {
                ""foo"": { ""const"": ""pass"" }
            },
            ""$ref"": ""extended"",
            ""$defs"": {
                ""extended"": {
                    ""$id"": ""extended"",
                    ""$anchor"": ""meta"",
                    ""type"": ""object"",
                    ""properties"": {
                        ""bar"": { ""$ref"": ""bar"" }
                    }
                },
                ""bar"": {
                    ""$id"": ""bar"",
                    ""type"": ""object"",
                    ""properties"": {
                        ""baz"": { ""$dynamicRef"": ""extended#meta"" }
                    }
                }
            }
        }
*/", tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 315
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 344
    testRunner.Given("the input JSON file \"dynamicRef.json\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 345
    testRunner.And("the schema at \"#/9/schema\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 346
    testRunner.And(string.Format("the input data at \"{0}\"", inputDataReference), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 347
    testRunner.And("I generate a type for the schema", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 348
    testRunner.And("I construct an instance of the schema type from the data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 349
    testRunner.When("I validate the instance", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 350
    testRunner.Then(string.Format("the result will be {0}", valid), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("multiple dynamic paths to the $dynamicRef keyword")]
        [NUnit.Framework.TestCaseAttribute("#/010/tests/000/data", "true", "recurse to anyLeafNode - floats are allowed", null)]
        [NUnit.Framework.TestCaseAttribute("#/010/tests/001/data", "false", "recurse to integerNode - floats are not allowed", null)]
        public virtual void MultipleDynamicPathsToTheDynamicRefKeyword(string inputDataReference, string valid, string description, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("inputDataReference", inputDataReference);
            argumentsOfScenario.Add("valid", valid);
            argumentsOfScenario.Add("description", description);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("multiple dynamic paths to the $dynamicRef keyword", @"/* Schema: 
{
            ""$id"": ""https://test.json-schema.org/dynamic-ref-with-multiple-paths/main"",
            ""$defs"": {
                ""inner"": {
                    ""$id"": ""inner"",
                    ""$dynamicAnchor"": ""foo"",
                    ""title"": ""inner"",
                    ""additionalProperties"": {
                        ""$dynamicRef"": ""#foo""
                    }
                }
            },
            ""if"": {
                ""propertyNames"": {
                    ""pattern"": ""^[a-m]""
                }
            },
            ""then"": {
                ""title"": ""any type of node"",
                ""$id"": ""anyLeafNode"",
                ""$dynamicAnchor"": ""foo"",
                ""$ref"": ""main#/$defs/inner""
            },
            ""else"": {
                ""title"": ""integer node"",
                ""$id"": ""integerNode"",
                ""$dynamicAnchor"": ""foo"",
                ""type"": [ ""object"", ""integer"" ],
                ""$ref"": ""main#/$defs/inner""
            }
        }
*/", tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 356
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 390
    testRunner.Given("the input JSON file \"dynamicRef.json\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 391
    testRunner.And("the schema at \"#/10/schema\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 392
    testRunner.And(string.Format("the input data at \"{0}\"", inputDataReference), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 393
    testRunner.And("I generate a type for the schema", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 394
    testRunner.And("I construct an instance of the schema type from the data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 395
    testRunner.When("I validate the instance", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 396
    testRunner.Then(string.Format("the result will be {0}", valid), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
