// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.7.0.0
//      SpecFlow Generator Version:3.7.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Features.JsonSchema.Draft2020212
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.7.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("idn-hostname draft2020-12")]
    [NUnit.Framework.CategoryAttribute("draft2020-12")]
    public partial class Idn_HostnameDraft2020_12Feature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = new string[] {
                "draft2020-12"};
        
#line 1 "idn-hostname.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/JsonSchema/Draft2020212", "idn-hostname draft2020-12", "    In order to use json-schema\r\n    As a developer\r\n    I want to support idn-ho" +
                    "stname in draft2020-12", ProgrammingLanguage.CSharp, new string[] {
                        "draft2020-12"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("validation of internationalized host names")]
        [NUnit.Framework.TestCaseAttribute("#/000/tests/000/data", "true", "a valid host name (example.test in Hangul)", null)]
        [NUnit.Framework.TestCaseAttribute("#/000/tests/001/data", "false", "illegal first char U+302E Hangul single dot tone mark", null)]
        [NUnit.Framework.TestCaseAttribute("#/000/tests/002/data", "false", "contains illegal char U+302E Hangul single dot tone mark", null)]
        [NUnit.Framework.TestCaseAttribute("#/000/tests/003/data", "false", "a host name with a component too long", null)]
        [NUnit.Framework.TestCaseAttribute("#/000/tests/004/data", "false", "invalid label, correct Punycode", null)]
        [NUnit.Framework.TestCaseAttribute("#/000/tests/005/data", "true", "valid Chinese Punycode", null)]
        [NUnit.Framework.TestCaseAttribute("#/000/tests/006/data", "false", "invalid Punycode", null)]
        [NUnit.Framework.TestCaseAttribute("#/000/tests/007/data", "false", "U-label contains \"--\" in the 3rd and 4th position", null)]
        [NUnit.Framework.TestCaseAttribute("#/000/tests/008/data", "false", "U-label starts with a dash", null)]
        [NUnit.Framework.TestCaseAttribute("#/000/tests/009/data", "false", "U-label ends with a dash", null)]
        [NUnit.Framework.TestCaseAttribute("#/000/tests/010/data", "false", "U-label starts and ends with a dash", null)]
        [NUnit.Framework.TestCaseAttribute("#/000/tests/011/data", "false", "Begins with a Spacing Combining Mark", null)]
        [NUnit.Framework.TestCaseAttribute("#/000/tests/012/data", "false", "Begins with a Nonspacing Mark", null)]
        [NUnit.Framework.TestCaseAttribute("#/000/tests/013/data", "false", "Begins with an Enclosing Mark", null)]
        [NUnit.Framework.TestCaseAttribute("#/000/tests/014/data", "true", "Exceptions that are PVALID, left-to-right chars", null)]
        [NUnit.Framework.TestCaseAttribute("#/000/tests/015/data", "true", "Exceptions that are PVALID, right-to-left chars", null)]
        [NUnit.Framework.TestCaseAttribute("#/000/tests/016/data", "false", "Exceptions that are DISALLOWED, right-to-left chars", null)]
        [NUnit.Framework.TestCaseAttribute("#/000/tests/017/data", "false", "Exceptions that are DISALLOWED, left-to-right chars", null)]
        [NUnit.Framework.TestCaseAttribute("#/000/tests/018/data", "false", "MIDDLE DOT with no preceding \'l\'", null)]
        [NUnit.Framework.TestCaseAttribute("#/000/tests/019/data", "false", "MIDDLE DOT with nothing preceding", null)]
        [NUnit.Framework.TestCaseAttribute("#/000/tests/020/data", "false", "MIDDLE DOT with no following \'l\'", null)]
        [NUnit.Framework.TestCaseAttribute("#/000/tests/021/data", "false", "MIDDLE DOT with nothing following", null)]
        [NUnit.Framework.TestCaseAttribute("#/000/tests/022/data", "true", "MIDDLE DOT with surrounding \'l\'s", null)]
        [NUnit.Framework.TestCaseAttribute("#/000/tests/023/data", "false", "Greek KERAIA not followed by Greek", null)]
        [NUnit.Framework.TestCaseAttribute("#/000/tests/024/data", "false", "Greek KERAIA not followed by anything", null)]
        [NUnit.Framework.TestCaseAttribute("#/000/tests/025/data", "true", "Greek KERAIA followed by Greek", null)]
        [NUnit.Framework.TestCaseAttribute("#/000/tests/026/data", "false", "Hebrew GERESH not preceded by Hebrew", null)]
        [NUnit.Framework.TestCaseAttribute("#/000/tests/027/data", "false", "Hebrew GERESH not preceded by anything", null)]
        [NUnit.Framework.TestCaseAttribute("#/000/tests/028/data", "true", "Hebrew GERESH preceded by Hebrew", null)]
        [NUnit.Framework.TestCaseAttribute("#/000/tests/029/data", "false", "Hebrew GERSHAYIM not preceded by Hebrew", null)]
        [NUnit.Framework.TestCaseAttribute("#/000/tests/030/data", "false", "Hebrew GERSHAYIM not preceded by anything", null)]
        [NUnit.Framework.TestCaseAttribute("#/000/tests/031/data", "true", "Hebrew GERSHAYIM preceded by Hebrew", null)]
        [NUnit.Framework.TestCaseAttribute("#/000/tests/032/data", "false", "KATAKANA MIDDLE DOT with no Hiragana, Katakana, or Han", null)]
        [NUnit.Framework.TestCaseAttribute("#/000/tests/033/data", "false", "KATAKANA MIDDLE DOT with no other characters", null)]
        [NUnit.Framework.TestCaseAttribute("#/000/tests/034/data", "true", "KATAKANA MIDDLE DOT with Hiragana", null)]
        [NUnit.Framework.TestCaseAttribute("#/000/tests/035/data", "true", "KATAKANA MIDDLE DOT with Katakana", null)]
        [NUnit.Framework.TestCaseAttribute("#/000/tests/036/data", "true", "KATAKANA MIDDLE DOT with Han", null)]
        [NUnit.Framework.TestCaseAttribute("#/000/tests/037/data", "false", "Arabic-Indic digits mixed with Extended Arabic-Indic digits", null)]
        [NUnit.Framework.TestCaseAttribute("#/000/tests/038/data", "true", "Arabic-Indic digits not mixed with Extended Arabic-Indic digits", null)]
        [NUnit.Framework.TestCaseAttribute("#/000/tests/039/data", "true", "Extended Arabic-Indic digits not mixed with Arabic-Indic digits", null)]
        [NUnit.Framework.TestCaseAttribute("#/000/tests/040/data", "false", "ZERO WIDTH JOINER not preceded by Virama", null)]
        [NUnit.Framework.TestCaseAttribute("#/000/tests/041/data", "false", "ZERO WIDTH JOINER not preceded by anything", null)]
        [NUnit.Framework.TestCaseAttribute("#/000/tests/042/data", "true", "ZERO WIDTH JOINER preceded by Virama", null)]
        [NUnit.Framework.TestCaseAttribute("#/000/tests/043/data", "true", "ZERO WIDTH NON-JOINER preceded by Virama", null)]
        [NUnit.Framework.TestCaseAttribute("#/000/tests/044/data", "true", "ZERO WIDTH NON-JOINER not preceded by Virama but matches regexp", null)]
        public virtual void ValidationOfInternationalizedHostNames(string inputDataReference, string valid, string description, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("inputDataReference", inputDataReference);
            argumentsOfScenario.Add("valid", valid);
            argumentsOfScenario.Add("description", description);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("validation of internationalized host names", "/* Schema: \r\n{ \"format\": \"idn-hostname\" }\r\n*/", tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 8
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 12
    testRunner.Given("the input JSON file \"idn-hostname.json\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 13
    testRunner.And("the schema at \"#/0/schema\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 14
    testRunner.And(string.Format("the input data at \"{0}\"", inputDataReference), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 15
    testRunner.And("I generate a type for the schema", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 16
    testRunner.And("I construct an instance of the schema type from the data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 17
    testRunner.When("I validate the instance", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 18
    testRunner.Then(string.Format("the result will be {0}", valid), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
